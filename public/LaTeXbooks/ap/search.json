["応用情報技術者 一問一答 tomixy since 2021/10/27 目次 第 I 部 離散数学 1 1 単位 1 2 位取り記数法と情報量 2 3 負の数の表現 6 4 小数の表現 7 5 シフト演算 7 6 コンピュータ演算と誤差 7 7 集合 8 第 II 部 応用数学 8 第 III 部 情報に関する理論 10 8 符号化とデータ圧縮 11 9 オートマトン 11 i ","目次 ii 10 形式言語 11 第 IV 部 デジタルデータの表し方 11 11 文字の表現方法 11 12 マルチメディアデータの表現方法 12 第 V 部 コンピュータの回路 17 13 論理回路 18 14 半加算器と全加算器 18 15 ビット操作とマスクパターン 18 16 論理回路と LSI 18 17 組み込みシステムにおけるコンピュータ制御 18 第 VI 部 言語 18 18 プログラミング言語 19 19 その他の言語 22 第 VII 部 コンピュータの構成 24 20 コンピュータの 5 大装置 24 21 CPU 25 21.1 CPU と主記憶装置の連携 ............................ 25 21.2 CPU の記憶保持 .................................. 26 21.3 CPU による命令実行手順 ............................ 26 21.3.1 命令の取り出し .............................. 27 ","目次 iii 21.3.2 命令の解読 ................................ 27 21.3.3 対象データ読み出し ........................... 27 21.3.4 命令実行 .................................. 27 21.4 命令のアドレス指定方式 ............................. 28 22 プロセッサ 29 23 メモリ 32 24 バス 35 25 入出力デバイス 37 26 入出力装置 37 第 VIII 部 システム構成要素 39 27 システムの構成 39 28 システムの評価指標 45 第 IX 部 ソフトウェア 48 29 オペレーティングシステム 48 30 ミドルウェア 54 31 開発ツール 55 31.1 プログラミングを支援するツール ........................ 55 31.2 言語プロセッサ .................................. 56 32 オープンソースソフトウェア 57 第 X 部 ヒューマンインターフェース 60 33 ヒューマンインターフェース技術 60 ","目次 iv 34 インターフェース設計 61 第 XI 部 システム開発技術 63 35 システム要件定義 63 36 システム方式設計 65 37 ソフトウェア要件定義 65 38 ソフトウェア方式設計・ソフトウェア詳細設計 69 38.1 ソフトウェア品質 ................................. 69 38.2 構造化設計 ..................................... 70 38.3 オブジェクト指向設計 .............................. 72 38.4 再利用とパターン ................................. 73 39 ソフトウェア構築 74 39.1 ソフトウェアユニットの作成 .......................... 74 39.2 ソフトウェアユニットのテスト ......................... 74 39.3 テストの手法 ................................... 74 39.4 ソフトウェアの品質評価 ............................. 76 40 ソフトウェア結合・ソフトウェア適格性確認テスト 76 41 システム結合・システム適格性確認テスト 77 42 導入 78 43 受入れ支援 78 44 保守・廃棄 78 第 XII 部 ソフトウェア開発管理技術 79 45 開発プロセス・手法 79 45.1 ソフトウェア開発モデル ............................. 79 ","目次 v 45.2 開発プロセス ................................... 82 45.3 開発手法 ...................................... 83 46 知的財産適用管理 84 46.1 著作権管理 ..................................... 84 46.2 特許管理 ...................................... 84 46.3 技術的保護 ..................................... 84 47 開発環境管理 85 48 構成管理・変更管理 86 第 XIII 部 プロジェクトマネジメント 86 49 プロジェクトマネジメント 86 50 プロジェクト結合 89 51 プロジェクトのステークホルダ 90 52 プロジェクトのスコープ 91 53 プロジェクトの資源 92 54 プロジェクトの時間 93 54.1 マネジメントプロセス .............................. 93 54.2 スケジュールの作成方法 ............................. 94 54.3 スケジュール短縮手法 .............................. 95 54.4 スケジュールコントロール ............................ 95 55 プロジェクトのコスト 96 55.1 マネジメントプロセス .............................. 96 55.2 コスト見積手法 .................................. 96 55.3 マネジメント技法 ................................. 98 56 プロジェクトのリスク 99 ","目次 vi 56.1 マネジメントプロセス .............................. 99 57 プロジェクトの品質 101 57.1 品質マネジメントプロセス ............................ 101 57.2 品質マネジメント手法 .............................. 102 58 プロジェクトの調達 102 59 プロジェクトのコミュニケーション 102 ","1 第 I 部 離散数学 1 単位 コンピュータ内部では、すべての情報は電気信号の「ON」と「OFF」の 2 つの状態で扱 われているため、これを一般的に 2 進数の 1 と 0 に対応させて表現している。 コンピュータで扱う最小の情報量の単位を ビット （ bit ）といい、2 進数 1 桁に相当 する。 ビット 8 個を集めたものを バイト （ Byte ）といい、情報量の基本単位になっている。 コンピュータが扱う情報量は膨大なものになっているため、バイト（B）の前に次のよう な接頭辞をつけて表される。 接頭辞 意味 k （ キロ ） 10 3 M （ メガ ） 10 6 G （ ギガ ） 10 9 T （ テラ ） 10 12 コンピュータの処理速度は非常に速くなっているため、秒（S）の前に次のような接頭辞 をつけて表される。 接頭辞 意味 m （ ミリ ） 10 −3 µ （ マイクロ ） 10 −6 n （ ナノ ） 10 −9 p （ ピコ ） 10 −12 ","2 2 位取り記数法と情報量 2 進数は、 0 と 1 の 2 種類の数字を使って、 1 の次の桁が一つ桁上がりする。 コンピュータ内部では 2 進数が使われているが、桁数が非常に長くなるため、人間が考え る時には、2 進数と簡単に変換できる 8 進数や 16 進数がよく使われる。 8 進数は、 0 から 7 までの 8 種類の数字を使って、 7 の次の桁が一つ桁上がりする。 16 進数は、 0 から 9 までの数字と A から F までの英字を使って、 F の次の桁が一つ桁 上がりする。 基数 とは、数を表現する時に桁上がりの基準になる数であり、n 進数では n である。 n ビットで表すことのできる情報量は、0 と 1 を n 桁分並べたものだから、2 個のものか ら重複を許して n 個を並べる重複順列と考えて、 2 n 通りある。 n 進数 r 桁で表すことのできる数は、n 個の数字から重複を許して r 個を並べる重複順列 と考えて、 n r 通りある。 8 進数一桁で表すことのできる数は 8 1 =2 3 通りあるため、8 進数では、1 桁で 3 ビッ ト分の情報を持たせることができる。 16 進数一桁で表すことのできる数は 16 1 =2 4 通りあるため、16 進数では、1 桁 で 4 ビット分の情報を持たせることができる。 1 バイトで表せる数は 2 8 = 16 2 通りあるため、1 バイトの情報は 2 桁の 16 進数で表 すことができる。 n ビットで表すことができる情報は 2 n 通りあるから、 ","3 n ビットが表している情報が A である確率 P は、 1 2 n である。 P を 2 r の形に変形すると、 P = 2 −n となり、両辺の対数を取って −n = log 2 P n = − log 2 P 確率 P で発生する事実 A を表すのに n ビット必要になることから、 n = log 2 P を事象 A の 情報量 という。 各数値の重要度（割合）を考慮した平均を 加重平均 といい、 1 ≤ k ≤ n とし、x k である割合（ 重み ）を w k とすると、 x = n summationdisplay k =1 w k x k n summationdisplay k =1 w k で表される。 期待値 X は、 • 1 回の試行で得られる値の平均値 • 起こる確率を考慮した、起こりうる値の平均 であり、結果 x k が起こる確率を p k とすると、p k を重みとした x k の加重平均で表され る。 確率は全ての場合に対する割合であるから、 確率の全ての場合の総和 n summationdisplay k =1 p k は、 100 % = 1 となるため、 X は、加重平均の分 子 だけ残ったものとなり、次のように表される。 X = n summationdisplay k =1 x k p k ","4 情報量の定義では、2 n 通りの事象が均一の確率で起こるとみなして計算したが、 そうでない場合を考慮して、 とりうる情報量の平均をとった 平均情報量 （ エントロピー ） N が生み出された。 これは期待値で表され、事象のもつ情報量が N k となる確率を P k とすると、 N = n summationdisplay k =1 P k N k となる。 2 進数の 1101.011 を 10 進数で表すと、 1101.011 (2) =1 · 2 3 +1 · 2 2 +0 · 2 1 +1 · 2 0 +0 · 2 -1 +1 · 2 -2 +1 · 2 -3 =1 · 8 +1 · 4 +0 · 2 +1 · 1 +0 · 1 2 +1 · 1 4 +1 · 1 8 = 8 + 4 + 0 + 1 + 0 + 0.25 + 0.125 = 13.375 となる。 ここで、各桁に現れた 2 i を、2 進数のもつ各桁の 重み という。 10 進数の 13.375 を 2 進数で表すには、次のように考える。 2 3 < 13.375 < 2 4 より、13.375 には 2 3 が 1 つ含まれる。 13.375 ÷ 2 3 =1 余り 5.375 であるから、 13.375 = 1 · 2 3 +5.375 同様に、5.375 には 2 2 が 1 つ含まれ、2 2 で割った時の余りは 1.375 であるから、 13.375 = 1 · 2 3 +1 · 2 2 +1.375 1.375 には 2 1 が 0 個含まれ、余りは 1.375 であるから、 13.375 = 1 · 2 3 +1 · 2 2 +0 · 2 1 +1.375 ","5 1.375 には 2 0 =1 が 1 個含まれ、余りは 0.375 であるから、 13.375 = 1 · 2 3 +1 · 2 2 +0 · 2 1 +1 · 2 0 +0.375 0.375 には 2 −1 =0.5 が 0 個含まれ、余りは 0.375 であるから、 13.375 = 1 · 2 3 +1 · 2 2 +0 · 2 1 +1 · 2 0 +0 · 2 −1 +0.375 0.375 には 2 −2 =0.25 が 1 つ含まれ、余りは 0.125 であるから、 13.375 = 1 · 2 3 +1 · 2 2 +0 · 2 1 +1 · 2 0 +0 · 2 −1 +1 · 2 −2 +0.125 0.125 には 2 −3 =0.125 が 1 つ含まれ、余りは 0 であるから、 13.375 = 1 · 2 3 + 1 · 2 2 + 0 · 2 1 + 1 · 2 0 + 0 · 2 −1 + 1 · 2 −2 + 1 · 2 −3 よって、 13.375 = 1101.011 (2) 2 進数の 1101.01 は、10 進数では 1101.01 (2) = 1 · 2 3 + 1 · 2 2 + 0 · 2 1 + 1 · 2 0 + 0 · 2 −1 + 1 · 2 −2 と解釈できるが、 2 進数の 3 桁が 8 進数の 1 桁になるので、次のように式を変形していく。 1101.01 (2) = 1 · 2 3 bracehtipupleft bracehtipdownrightbracehtipdownleft bracehtipupright 8 1 の項 + 1 · 2 2 + 0 · 2 1 + 1 · 2 0 bracehtipupleft bracehtipdownrightbracehtipdownleft bracehtipupright 8 0 の項 + 0 · 2 −1 + 1 · 2 −2 bracehtipupleft bracehtipdownrightbracehtipdownleft bracehtipupright 8 −1 の項 =8+5+ 1 4 =1 · 8 1 +5 · 8 0 + 1 4 · 8 · 1 8 = 1 · 8 1 + 5 · 8 0 + 2 · 8 −1 = 15.2 (8) 2 進数の 1101.01 は、10 進数では 1101.01 (2) = 1 · 2 3 + 1 · 2 2 + 0 · 2 1 + 1 · 2 0 + 0 · 2 −1 + 1 · 2 −2 ","6 と解釈できるが、2 進数の 4 桁が 16 進数の 1 桁になるので、次のように式を変形して いく。 1101.01 (2) = 1 · 2 3 + 1 · 2 2 + 0 · 2 1 + 1 · 2 0 bracehtipupleft bracehtipdownrightbracehtipdownleft bracehtipupright 16 0 の項 + 0 · 2 −1 + 1 · 2 −2 bracehtipupleft bracehtipdownrightbracehtipdownleft bracehtipupright 16 −1 の項 = 13 + 1 4 = 13 · 16 0 + 1 4 · 16 · 1 16 = D · 16 0 +4 · 16 −1 = D.4 (16) 3 負の数の表現 4 桁の 2 進数の中で最大の数は 1111 である。 例えば、2 進数 0011 に 1100 を加えると上記の最大数になるが、 このとき加えた数（桁の最大値を得るために補った数）を 1 の補数 という。 4 桁の 2 進数の中で最大の数 1111 に 1 を加えると、5 桁の 2 進数の中で最小の 数 10000 が得られる。 2 進数は、1 の補数を加えると同じ桁の最大数が得られるが、それにさらに 1 を加えると、 桁が 1 桁増える事になる。 このような、桁あがりのために補う数 1 の補数 +1 のことを 2 の補数 という。 例えば、 8 ビットの 2 進数に 2 の補数 を加えると、 9 桁の 2 進数 100000000 が得られる。 しかし、コンピュータがこの数のために 8 ビット分の領域しか用意していなかった場合、 9 桁目の 1 は溢れて無視され、結果として 00000000 が得られる。 3+(−3) = 0 のように、n に加えると 0 になる数を n の逆数といい、−n で表されるが、 2 進数では、 2 の補数 がその逆数の役割を果たしていることになる。 このように、コンピュータでは、負の数を表すために 2 の補数 を利用している。 ","7 4 小数の表現 固定小数点数 表現とは、あらかじめ小数点の位置を決めておき、その位置に合わせて データを表現する方法である。 浮動小数点数表現では、数は次のような形式で表される。 仮数部 × 基数 指数部 5 シフト演算 6 コンピュータ演算と誤差 値がほぼ等しい二つの数値の差を求めた時、有効数字の桁数（ 有効桁数 ）が減ることに よって発生する誤差を 桁落ち という。 絶対値が非常に大きい数値と小さな数値の足し算や引き算を行った時、小さい数値が計算 結果に反映されないことによって発生する誤差を 情報落ち という。 切り捨て・切り上げ・四捨五入などで下位の桁を削除することによって生じる誤差 を 丸め誤差 という。 無限級数で表される数値の計算処理を有限の回数で打ち切ったことによって発生する誤差 を 打ち切り誤差 という。 演算結果が有限の桁内で表せる範囲を超えることによって、使用している記述方法では値 が表現しきれなくなることを オーバーフロー という。 浮動小数点数演算において、演算結果の指数部が小さくなりすぎ、使用している記述方法 では値が表現しきれなくなることを アンダーフロー という。このため、浮動小数点数表 ","8 記では、 0 や 0 に近い数値は表現することができない。 7 集合 二つの集合を足したものを 和集合 といい、 A OR B，A + B，A ∪ B，A ∨ B などと表す。 二つの集合の両方に当てはまるものを 積集合 といい、 A AND B，A · B，A ∩ B，A ∧ B などと表す。 ある集合の否定を 補集合 といい、集合 A の否定は NOT A ， A などと表す。 ある集合から、別の集合の条件に当てはまるものを引いたものを 差集合 といい、 A -B と表す。 二つの集合のうち、どちらかの条件に当てはまるものから、両方の条件に当てはまるもの を引いたものを 対称差集合 または 排他的論理和 といい、 A XOR B，A ⊕ B，A ⋄ B などと表す。 ","9 第 II 部 応用数学 繰り返し実行した場合、それが独立した事象であれば、その分布は 正規分布 に従うこと が知られている。 正規分布の場合、その確率の散らばり具合によって、 標準偏差 （σ ）が求められ、 • ±1σ の間に約 68 % のデータ • ±2σ の間に約 95 % のデータ • ±3σ の間に約 99.7 % のデータ が含まれる。 連続的なデータについて関数モデルを当てはめる分析を 回帰分析 といい、 関数の変数が一つの場合を 単回帰分析 、複数の場合を 重回帰分析 という。 確率 p から求める ロジット （ log(p) − log(1 − p) ）を使用する ロジスティック回帰分析 などの手法がある。 多くの変数をより少ない指標や合成変数にまとめ、要約する手法を 主成分分析 という。 観測された結果について、どのような潜在的な要因（ 因子 ）から影響を受けているかを 探る手法を 因子分析 という。 二つの変数の間にどの程度の直線的な関係がある数値で表す分析を 相関分析 という。 相関分析で用いられる、データの分析がどれだけ直線が近いかを示す係数に 相関係数 が ある。 • 完全に右上がりの直線上にデータが分布している場合には 1 • 全く相関のない場合には 0 • 右下がりの直線上にデータが分布している場合には −1 ","10 の値をとる。 二つの事柄に関連があるという関係を 相関関係 という。 二つの事柄のどちらかが原因となって別の事柄が起こるという関係を 因果関係 という。 因果関係は相関分析だけでは求められず、 二つのグループに分けて分析する ランダム化比較試験 など、更なる検証が必要となる。 二つの事柄の間の相関が、直接の関連ではなく他の要素を原因とした 擬似相関 の可能性 もある。 グラフは、 ノード （ 節点 ）と エッジ （ 枝 、 辺 ）から構成され、 方向性のある 有向グラフ と、方向性のない 無向グラフ がある。 ","11 第 III 部 情報に関する理論 8 符号化とデータ圧縮 9 オートマトン 10 形式言語 第 IV 部 デジタルデータの表し方 11 文字の表現方法 ASCII コード （ American Standard Code for Information Interchange は、 ANSI （ 米国標準規格協会 ）で定めた 7 ビットの文字体系で、 8 ビット目を パリティビット としている。 • 英字 • 数字 • 特殊文字および制御文字 からなり、漢字に関する規定はない。 EBCDIC （ Extended Binary Coded Decimal Interchange Code ）は、 IBM 社 が開発 した 8 ビットからなる文字体系で、汎用コンピュータに使われている。 JIS コード は JIS（ Japan Industrial Standard ： 日本工業規格 ）で定めた文字体系で、 • 7 ビットの ローマ字用 7 単位符号 • 8 ビットに拡張した ローマ字・片仮名用 8 単位符号 • 2 バイトに拡張してひらがなと漢字を追加した JIS 漢字コード ","12 がある。 シフト JIS コード は JIS コードを変換したものであり、 1 バイト文字（ 英数字 ・ 片仮名 ） と 2 バイト文字（ ひらがな・漢字 ）の混在が可能で、Windows や Mac OS などの日本 のパソコン用の文字コードとして普及した。 EUC （ Extended Unix Code ）は 拡張 UNIX コード とも呼ばれ、 全角文字 と 半角カタカナ文字 を 2 バイトまたは 3 バイトで表現することで、UNIX で も漢字が扱えるようになった。 UNICODE は、世界各国の文字の多くを一つの体系で表現し、データ交換が円滑にでき るように制定された文字コード体系である。 UTF-8 は、UNICODE の符号化方式（番号の振り方）の一つである。 12 マルチメディアデータの表現方法 音や画像などのアナログの情報をコンピュータで扱うためには、デジタルのデータに変換 する必要がある。この変換を A/D 変換 （ Analog/Digital 変換 ）という。 録音したデジタル音声を聞く場合など、デジタルのデータを実際に用いる場合は、逆にア ナログの情報に変換する必要がある。この変換を D/A 変換 （ Digital/Analog 変換 ）と いう。 A/D 変換を行うためには、次の 3 つの作業が必要である。 1. 連続のデータを一定の間隔をおいてサンプリングする 標本化 2. サンプリングしたアナログの値をデジタルに変換する 量子化 3. デジタル値を 2 進数に変換する 符号化 ある周波数のアナログ信号をデジタルデータに変換する時、それをアナログ信号に 復元するためには、その周波数の 2 倍 のサンプリング周波数が必要だという定理 ","13 を 標本化定理 という。 マルチメディア とは、複数の種類の情報をまとめて扱うメディアである。 アナログデータである音声を A/D 変換 を行って符号化したデータの形式は PCM （ Pulse Code Modulation ）であるが、この形式ではデータの容量が大きくなるため、多 くの場合、 MP3 （ MPEG Audio Layer-3 ）などの圧縮技術を使用して圧縮される。 電子楽器の演奏データをデジタル転送するための共通規格に MIDI （ Musical Instrument Digital Interface ）がある。 静止画の色は、 • 光の 3 原色（ Red ・ Green ・ Blue ） • 色の 3 原色（ Cyan ・ Magenta ・ Yellow ） のいずれかを使って表現される。 画像の美しさは、 • 画素 （ ピクセル ） • 階調 • 解像度 によって差が出てくる。 BMP （ Microsoft Windows Bitmap Image ）は、単純に X 軸・Y 軸の座標と色を設定 する画像形式である。 GIF （ Graphics Interchange Format ）は、可逆圧縮の画像形式であるが、 256 色まで しか扱えず、ライセンスに制約があるなどの問題がある。 JPEG （ Joint Photographic Experts Group ）は、非可逆圧縮にすることで容量を小さ ","14 くした画像形式である。 PNG （ Portable Network Graphics ）は、GIF の機能を拡張し、GIF の問題点を解消 した画像形式である。 代表的な動画の保存形式は MPEG （ Moving Picture Experts Group ）である。 画像処理の代表的な規格には、次のようなものがある。 名称 圧縮性能 対象・用途 MPEG-1 1.5M ビット／秒 CD-ROM MPEG-2 数 M～数十 M ビット／秒 DVD や Blu-ray MPEG-4 数十 k～数百 k ビット／秒 モバイル機器 H.264 Blu-ray H.265 H.264 の約 2 倍 4K ／ 8K 放送 MPEG-4 は、 H.263 をベースに拡張が図られている。 H.264 は、 MPEG4 規格のパート 10 として標準化され、 AVC （ Advanced Video Coding ）または MPEG-4 AVC とも呼ばれる。 H.265 は HEVC （ High Eﬃciency Video Coding ）とも呼ばれる。 H.265 の技術を活用している画像のフォーマットに HEIF （ High Eﬃciency Image File Format ）があり、一つのファイルに複数の画像や アニメーションなど様々な情報を内包することが可能である。 マルチメディアコンテンツ は、静止画・動画・音声・テキストなどの様々なメディアを 統合する。 XML （ eXtensible Markup Language ）は複数のデータを構造化して統合することに ","15 向いているため、このフォーマットでマルチメディアを表現する方法が普及している。 MPEG では、 MPEG-7 がマルチメディア用のメタデータ表記方法の国際規格となり、 XML で記述される。 SMIL （ Synchronized Multimedia Integration Language ）は、同期させるレイアウ トや再生のタイミングを XML フォーマットで記述するマークアップ言語である。 画像をベクターイメージで表現する SVG （ Scalable Vector Graphics ）も、XML に よって記述されている。 電子書籍 は、テキストや静止画を中心としたマルチメディアのコンテンツを、電子的な ファイルとしてネットワーク上で配布できるようにしたものである。 PDF （ Portable Document Format ）では、文書ファイルの中に文字のフォントなど の印刷情報を埋め込むことができ、作成時と同じ形式で表示できる。 電子書籍の代表的な規格である EPUB （ Electronic PUBlication ）には • 各ページを画像で保存し、作成時と同じレイアウトで表示する フィックス 型 • CSS を利用して、表示する環境に合わせてレイアウトを変更することができ る リフロー 型 がある。 コンピュータグラフィックス （ CG ）は、 • 2 次元の 2DCG • 3 次元の 3DCG に大別される。 2DCG は、 • ベクターイメージ • ラスターイメージ ","16 の 2 つの形式に分けられる。 ラスターイメージにおいて、周辺の要素との平均化演算などを行うことで斜線や曲線のギ ザギザを目立たなくする技術を アンチエイリアシング という。 一つ一つの画素では表現できる色数が少ない環境でも、いくつかの画素を使って見かけ上 表示できる色数を増やし、滑らかで豊かな階調を表現する手法を ディザリング という。 3DCG では、次のようないろいろなモデルを考えて表現する。 • 物体をすべて線で表現する ワイヤフレーム モデル • 物体を面の集合として表現する サーフェス モデル • 物体を中身の詰まった固形物として扱う ソリッド モデル テクスチャマッピング は、形状が決められた物体の表面に、別に用意された画像ファイ ル（ テクスチャ ）を貼り付ける 3DCG の制作技法である。 メタボール は、物体を球や楕円体の集合としてモデル化する 3DCG の制作技法である。 レイトレーシング は、光源からの光線の経路を計算することで光の反射や透過などを 表現する 3DCG の制作技法であり、光線が届かない場所が 真っ黒 になるという特性が ある。 ラジオシティ は、光の相互反射を利用して物体表面の光のエネルギーを算出することで 表面の明るさを決定する 3DCG の制作技法である。 Z バッファ法 は、3DCG において隠れた面を消去する方法の一つであり、すべてのピク セルについて視線とすべての物体との交点を計算し、最も近い交点以外を表示させない方 法である。 クリッピング は、画像の一部のみを切り抜いたり表示したりして、他の部分を表示させ ","17 ないようにする 3DCG の制作技法である。 レンダリング は、3DCG においてデータとして与えられた情報を計算によって画像化す ることであり、反射・透過方向への視線追跡を行わず、与えられた空間データのみから輝 度を計算する方法を ボリュームレンダリング という。 シェーディング は、明暗のコントラストで立体感を与える 3DCG の制作技法である。 モーションキャプチャ は、現実の人物や物体の動きをデジタルで記録し、解析す る 3DCG の技法である。アニメーションやゲームなどのキャラクタに人間らしい動きを させるためなどに利用される。 拡張現実 （ AR ： Augmented Reality ）は、人間が知覚する現実の環境をコンピュータ により拡張する技術であり、 • レンズ越しに動画やナビを表示させるなどする ウェアラブルデバイス などの利用例がある。 仮想現実 （ VR ： Virtual Reality ）は、実際の形はない or 形が異なるものを、ユーザ の感覚を刺激することによって理工学的に作り出す技術であり、 • 振動や匂いなどで臨場感を出すゲームや映画、遊園地のアトラクション などの利用例がある。 ","18 第 V 部 コンピュータの回路 13 論理回路 14 半加算器と全加算器 15 ビット操作とマスクパターン 16 論理回路と LSI 17 組み込みシステムにおけるコンピュータ制御 ロボットや機械などの他の機器を制御するシステムを 制御システム という。 センサ は制御システムの構成要素の一つであり、動きや温度などを計測するための機構 である。 • 温度を測定する サーミスタ • 光を測定する フォトダイオード • 物体の角度や角速度を測定する ジャイロセンサ などがある。 家庭用ゲーム機などで使われる距離画像センサでは、 TOF （ Top of Flight ）方式が用 いられており、照射した光線が対象物に当たって反射し、反射光が戻るまでにかかる時間 を基に距離を計測している。 アクチュエータ は制御システムの構成要素の一つであり、機械・機構などを物理的に動 かすための機構である。 ","19 第 VI 部 言語 18 プログラミング言語 コンピュータが解釈できるのは、 2 進数の 機械語 （ マシン語 ）のみであるが、 2 進数 の羅列なので人間にはとてもわかりにくく、実際には 16 進数で表記させてプログラムし ていた。 アセンブリ言語 は、機械語と 1 対 1 で対応させることで書きやすくした言語である。加 算演算を ADD 、データの移動（コピー）を MOV などで表現する。機械語を置き換えた だけなので、人間の考え方とはだいぶ異なり、例えば C = A + B を計算する場合は次のよ うなプログラムを組む。（PA，PB は CPU 内にある計算に使用するためのレジスタ領域） 1. MOV PA, A ;（変数 A の値を PA にコピー） 2. MOV PB, B ;（変数 B の値を PB にコピー） 3. ADD PA, PB;（PA と PB を加算し、その結果を PA に格納） 4. MOV C , PA;（PA の値を変数 C にコピー） アセンブリ言語の後に登場した 高級言語 （ 高水準言語 ）は、人間にとってわかりやすい 形式というコンセプトで書かれた言語であり、C = A + B などの数式をそのまま書ける ようになった。 具体的には次のような言語が該当する。 • COBOL （英語で文章を書くように事務処理を記述できる言語） • FORTRAN （数式で科学技術計算を行うための言語） 高級言語でプログラムするとき、 GOTO 命令で適当に行をジャンプすることを繰り返し ていると、混沌としてわかりづらいプログラム（ スパゲティプログラム ）になりがちで あった。 それを解消しようと、 ダイクストラ という人が • 順次 ","20 • 選択 （ if 文） • 繰り返し （ while 文や for 文） という 基本 3 構造 のみでプログラムを記述する 構造化プログラミング という考え方を 提唱した。 この考え方を採用した言語を 構造化言語 といい、 C や Pascal などが該当する。 関数 や サブルーチン という、同じ処理をする単位にまとめるという考え方も、 構造化言 語あたりから進化してきた。 関数（サブルーチン）などによるプログラムでは、 グローバル変数 （複数の関数で共通 使用する変数）の内容が意図しない場所で書き換えられたりして不具合を起こすことが多 くなったため、共通で同じ変数を使用する関数をまとめる クラス という考え方が必要に なった。 クラス以外にも、 オブジェクト指向 という、オブジェクトやクラスを中心とする考え方 が提唱された。 この考え方を採用した言語を オブジェクト指向言語 といい、 • 元祖である言語 Smalltalk • C 言語の発展形である C++ • Java 言語 などが登場した。 オブジェクト指向言語では、クラス内に同じ名前で引数の内容が異なる複数の関数を用意 し、 クラスに渡される内容に応じて異なる動作を行わせる オーバーロード が可能となる。 手続き型言語 は、処理手順を 1 行 1 行順を追って記述する言語であり、通常のプログラ ム言語はほとんどがこれに該当する。 関数型言語 は、数学的な関数の定義とその呼び出しでプログラムを記述する言語である。 再帰 処理向きで、代表例は ","21 • Lisp など。 論理型言語 は、述語論理を基礎とした論理式でプログラムを記述する言語である。 代表例は • 人工知能の研究開発で使用される Prolog など。 スクリプト言語 は、プログラムを機械語に コンパイル するのではなく、 スクリプト（台 本）のように記述して 1 行 1 行処理する簡易的な言語である。 代表例は • UNIX 上でシェルを動かすための シェルスクリプト • Excel の マクロ 言語 • Web ブラウザ上で動く JavaScript と JScript • Web サーバ上で動く、Java によるスクリプト言語 JSP （ Java Server Pages ） • Web サーバ上でも動く Perl ・ Ruby ・ PHP など。 JavaScript と JScript は互換性が低いため、共通する部分をまとめて共通化し た ECMAScript が作られた。 サーバ上では、 スクリプト言語ではない Java アプリケーションや サーブレット も動く。 共通言語基盤 （ CLI ： Common Language Infrastructure ）は、プログラム言語やアー キテクチャに依存しない環境を定義したものであり、様々な高級言語で書いたプログラム を、書き直すことなく他のプラットフォームでも使うことができる。マイクロソフトが策 定した .NET Framework の基幹を構成する実行コードや実行環境などについての使用で ある。 Ajax （ Asynchronous JavaScript + XMl ）は、 Web ブラウザ上で非同期通信を実施し、 ","22 通信結果によってページの一部を書き換える手法である。 JavaScript の通信機能を利用 し、新技術ではなく既存の技術を組み合わせて非同期通信を実現している。 19 その他の言語 XML （ eXtensible Markup Language ）は、特定の用途に限らず、汎用的に使うこと ができる拡張可能なマークアップ言語であり、文書構造の定義は DTD で行う。 整形式 XML 文書 （ well-format XML Document ）は、XML のデータを記述するため の文法に従った XML 文書であり、DTD での定義は存在しない or 定義に適合していなく ても支障はない。 妥当な XML 文書 （ valid XML Document ）は、 DTD の定義に適合した整形式 XML 文 書である。 XSLT （ XSL Transformation ）は、XML 文書を変換するために使われる言語である。 XLink （ XML Linking Language ）は、XML 文書同士のリンクを設定するための言語 である。 SVG （ Scalable Vector Graphics ）は、円や直線などの図形オブジェクトを XML 形式 で記述する画像フォーマットである。 SAML は、ユーザの認証情報を XML 形式で表現する仕様である。 データ定義言語 （ DDL ： Data Definition Language ）は、コンピュータのデータを定 義するための言語 or 言語の要素であり、 • XML のデータを定義する DTD （ document Type Definition ） • SQL の一部である SQL-DDL ","23 などがある。 HTML （ HyperText Markup Language ）は、Web ページを作成するために開発され た言語であり、通常のテキストの他に、別ページへのリンク（ ハイパーリンク ）を埋め 込むことができるテキスト（ ハイパーテキスト ）を使用する。画像・音声・映像などの データファイルも リンク で埋め込むことができる。 HTML の最新の規格である HTML5 では、 • クライアントとサーバとの間で ソケット （通信路）を確立し、 データの受送信がいつでも可能になる WebSocket などの技術が使用できる。 XHTML は、HTML を XML の文法で定義し直したものであり、 • <?xml version=1.0 encoding=Shift_JIS?> のような XML 宣言 を行う必要がある • 要素名や属性名はすべて 小文字 でなければならない • 必ず 開始タグ と 終了タグ で囲む必要がある などの様々な制約がある。 CSS （ Cascading Style Sheet ）は、 文章の 構造 と 体裁 を分離する という理念の下、文章のスタイルを記述するためにできた言語で、HTML や XHTML の 要素をどのように表示するかを定義する。 JSON （ JavaScript Object Notation ）は、JavaScript の一部をベースに作られた軽量 のデータ交換フォーマットで、 {name: tomixy} ","24 のようなかたちで名前と情報を簡単に表現する。 YAML （ YAML Ain’t Markup Language ）は、構造化データなどを name: tomixy のような簡潔なかたちで表現する形式で、軽量のマークアップ言語としても利用できる。 第 VII 部 コンピュータの構成 コンピュータは、プログラムという名の ソフトウェア が、 ハードウェア に「こう動け」 と指示をすることで動く機械である。 20 コンピュータの 5 大装置 コンピュータは、 • プログラムの命令を解釈して、コンピュータ全体の動作を制御する 制御 装置 • 四則演算をはじめとする計算やデータの演算処理を行う 演算 装置 • プログラムや演算結果を記憶するための 記憶 装置 • コンピュータにデータを入力するための 入力 装置 • コンピュータのデータを出力するための 出力 装置 という 5 つの装置が連携して動いている。 中央処理装置 （ CPU ： Central Processing Unit ）は、コンピュータの中枢部分で、 制御 装置と 演算 装置の役割を担う。 演算装置は、 算術論理演算装置 （ ALU ： Arithmetic and Logic Unit ）とも呼ばれる。 記憶装置には、次の 2 種類がある。 ","25 • 動作するために必要なプログラムやデータを一時的に保存する 主記憶装置 （コンピュータの電源を切ると、記憶内容は消えてしまう） • プログラムやデータを長期にわたり記憶する 補助記憶装置 （コンピュータの電源を切っても記憶内容は消えない） 入力装置には、 • 文字や数字を入力するための キーボード • 自身を動かすことで、位置情報を入力する マウス • 図や写真などをデジタルデータに変換して入力するための スキャナ などがある。 出力装置には、 • コンピュータ内部のデータを画面に映し出す ディスプレイ • コンピュータの処理したデータを紙に印刷する プリンタ などがある。 21 CPU 21.1 CPU と主記憶装置の連携 補助記憶装置は、主記憶装置に比べて読み書き速度がかなり遅いため、プログラムを実行 する時は、補助記憶装置にあるプログラムを主記憶装置に移す必要がある。 このように、実行時には予め主記憶装置上にプログラムを読み込んでおく（ ロードする ） 方式を プログラム内蔵方式 （ プログラム記憶方式 ）という。 主記憶装置に読み込んだプログラムは、CPU が命令を一つずつ取り出して、順番に実行 していく。 この方式を 逐次制御方式 という。 プログラム内蔵方式でプログラムを準備し、逐次制御方式でプログラムを実行するコン ","21.2 CPU の記憶保持 26 ピュータを ノイマン型コンピュータ といい、現在広く利用されているコンピュータのほ とんどがこれに該当する。 主記憶装置は、一定の区画ごとに番号が割り振られていて、この番号（ アドレス 、 番地 ） を指定することで、任意の場所を読み書きすることができる。 21.2 CPU の記憶保持 CPU が命令を実行するために取り出した情報は、 レジスタ と呼ばれる CPU 内部の記憶 装置に保持する。 レジスタには、次のような種類がある。 • 次に実行するべき命令が入っているアドレスを記憶する プログラムカウンタ • 取り出した命令を一時的に記憶する 命令レジスタ • 連続したデータの取り出しに使うための増分値を保持する インデックスレジスタ （ 指標レジスタ ） • プログラムの先頭アドレスを保持する ベースレジスタ • 演算の対象となる数や、演算結果を記憶する アキュムレータ • 特に機能を限定していない 汎用レジスタ 21.3 CPU による命令実行手順 CPU では、大まかに次のような手順で命令が実行される。 1. 命令の取り出し（ フェッチ ） 2. 命令の解読 3. 対象データ（ オペランド ）読み出し 4. 命令実行 もっと詳しく見ると、 1. プログラムカウンタ の示すアドレスを参照して命令を取り出し、 ","21.3 CPU による命令実行手順 27 それを 命令レジスタ に記憶させる。 2. 取り出し終わったら、次の命令に備えて プログラムカウンタ の値を 1 つ増加さ せる。 21.3.1 命令の取り出し プログラムカウンタ の示すアドレスを参照して命令を取り出し、それを 命令レジスタ に 記憶させる。 取り出し終わったら、次の命令に備えて プログラムカウンタ の値を 1 つ増加させる。 21.3.2 命令の解読 命令レジスタに取り出した命令は、次の構成でできている。 • 実行させたい命令の種類を示すコード番号が入っている 命令部 • 処理対象となるデータを納めたメモリアドレスなどが入っている オペランド部 命令レジスタに取り出した命令のうち、 命令 部が 命令デコーダ に送られ、 送られた先ではコードが解読され、必要な機器に制御信号を飛ばす。 21.3.3 対象データ読み出し 今度は オペランド 部を参照して演算の対象データを読み出し、それを 汎用レジスタ な どに記憶させる。 21.3.4 命令実行 汎用レジスタ から処理対象のデータを取り出して演算し、演算結果を 汎用レジスタ に 書き戻して一つの命令が実行完了する。 ","21.4 命令のアドレス指定方式 28 21.4 命令のアドレス指定方式 命令のオペランド部には、必ずしも「メモリアドレス」が入っているとは限らない。 メモリアドレスでないデータが入っている場合には、何らかの計算によってメモリアドレ スを求める必要がある。 その方式を アドレス修飾 （ アドレス指定 ）という。 オペランド部に、対象となるデータそのものが入っている方式を 即値アドレス指定方式 と いう。 この方式では、入っているデータをそのまま使うため、メモリへの参照は行わない。 オペランド部に記載してあるアドレスが、データが入っている場所（ 実効アドレス ）で ある方式を 直接アドレス指定方式 （ 絶対アドレス指定方式 ）という。 この場合、オペランド部が示すアドレスの中身が 200 だとしたら、演算対象のデータ は 200 となる。 オペランド部に記載してあるアドレスが、データのメモリアドレスが入っている場所であ る方式を 間接アドレス指定方式 という。 この場合、オペランド部が示すアドレスの中身が 200 だとしたら、演算対象のデータ は 200 番地にあるデータ となる。 インデックス （ 指標 ） アドレス指定方式 では、オペランド部の先頭にインデックスレ ジスタ番号が書かれている。 例えば、 • オペランド部本体の値が 200 • インデックスレジスタ番号が 3 だとしたら、実効アドレスは次のようにして求められる。 実効アドレス = インデックスレジスタ 3 番地に入っている値 + 200 インデックスレジスタの値 を増減させることで、等間隔で並ぶアドレスに同じ命令を繰 り返し処理できるという利点があるため、 配列 型のデータ処理などはこの方式で指定さ ","29 れる。 ベースアドレス指定方式 は、プログラム先頭アドレス（ ベースレジスタ の値）からの差 分をオペランド部で指定する方式である。 オペランド部の値が 200 だとしたら、実効アドレスは次のようにして求められる。 実効アドレス = ベースレジスタに入っている値 + 200 メモリ上のどこにプログラムがロードされても命令を変えなくて済むという利点がある。 22 プロセッサ プロセッサ は、コンピュータの内部でコンピュータを動作させるためのハードウェアで ある。 DSP （ Degital Signal Processor ）は、 A/D 変換など、デジタル信号処理に特化したプ ロセッサである。 FPU （ Floating Point Unit ）は、浮動小数点演算に特化したプロセッサである。 GPU（ Graphics Processing Unit ）は、画像専用のプロセッサで、 3D などでグラフィッ クスを高速に処理するために利用される。 GPU を画像処理以外の目的で利用する技術に GPGPU （ General-Purpose computing on Graphics Processing Units ） があり、 AI チップ としてディープラーニングなどの演算に用いられる。 プロセッサを高速化する一番単純な方法は、 クロック周波数 （1 秒間に実行され る クロック （ステージ）の数）を上げることだが、それだけでは限界があるため、様々 な高速化技術が考えられた。 パイプライン は、命令のステージを一つずつずらして同時に複数の命令を実行させる高 ","30 速化技術だが、分岐命令などで順番が変わると パイプラインハザード が発生し、処理の やり直しとなる。 スーパースカラ は、パイプラインのステージを複数同時に実行させることで効率化を実 現する高速化技術である。演算の割り当てはハードウェアによって動的に行う。 スーパーパイプライン は、パイプラインをさらに細分化して、一度に実行できる命令数 を増やす高速化技術である。 VLIW （ Very Long Instruction Word ： 超長命令語 ）は、命令語を長くすることで、一 つの命令で複数の機能を一度に実行できるようにした高速化技術である。命令語が通 常 128 ビットと長いことが名前の由来である。 プロセッサ自体を高速化させる技術の他に、複数のプロセッサを同時に稼働させて高速化 を図る マルチプロセッサ という方法がある。 密結合マルチプロセッサ は、 メモリ （ 主記憶 ）を共有する結合方式である。 外見的には一つに見えるプロセッサの中に複数のプロセッサ（ コア ）を封入し た マルチコアプロセッサ も密結合マルチプロセッサの一種であり、現在の CPU 高速化 技術の主流となっている。 疎結合マルチプロセッサ は、複数のプロセッサに別々のメモリを割り当てた結合方式で あり、複数の独立したコンピュータシステムがあるのと同じなので、その間に高速な通信 システムを用いてデータのやりとりを行う。 クラスタシステム などは、疎結合マルチプロセッサの一種である。 プロセッサの省電力化技術には、動作していない回路ブロックへのクロック供給を停 止する クロックゲーティング や、動作していない回路ブロックへの電力供給を遮断す ","31 る パワーゲーティング などがある。 MIPS （ Million Instructions Per Second ）は、1 秒間に何百万個の命令が実行できる かを表し、PC やサーバーなどのプロセッサの性能を表す時によく用いられる指標であ る。ほとんど分岐のないプログラムを実行させた時の ピーク値 を表すため、実際のアプ リケーションを動かした場合の性能とは異なる。 FLOPS （ Floating-point Operations Per Second ）は、1 秒間に浮動小数点演算が何 回できるかを表したものであり、科学技術計算やシミュレーションなどを行うスーパーコ ンピュータ、ゲーム機などの性能を表すためによく用いられる。 現在実行中のプログラムを中断して別の処理を行うことを 割込み という。 内部割込み はプログラム内部からの割込みであり、ソフトウェアからの割込みなの で ソフトウェア割込み と呼ばれることもある。 プログラム内で 0 の割り算やオーバーフローが起こった時に発生する内部割込 みを プログラム割込み という。 プログラムが OS に処理を依頼する時に行われる内部割込みを SVC 割込み という。 仮想記憶管理において存在しないページにアクセスするときに行われる内部割込 みを ページフォールト という。 外部割込み は、ハードウェア関連の割込みなので ハードウェア割込み ともいう。 タイマから行われる外部割込みを タイマ割込み という。 ハードウェアの異常が検出された時に行われる外部割込みを 機械チェック割込み という。 ","32 キーボードからの入出力装置から行われる外部割込みを 入出力割込み という。 コンソールからスイッチが行われた時に発生する外部割込みを コンソール割込み という。 エンディアン とは、複数バイトのデータを格納する時に、それをメモリに配置する方式 であり、 バイトオーダ ともいう。 データの上位バイトから順番にメモリを並べる方式を ビッグエンディアン という。 データの下位バイトから順番にメモリを並べる方式を リトルエンディアン という。 23 メモリ メモリ （ 記憶装置 ）とは、コンピュータにおいて情報の記憶を行う装置であり、プロ セッサが直接アクセスできる 主記憶装置 と、それ以外の 補助記憶装置 の 2 種類がある。 主記憶装置には、大きく分けて、読み書きが自由な RAM （ Random Access Memory ） と、読み出し専用の ROM （ Read Only Memory ）の 2 種類がある。 一般的に使用されている半導体メモリを使った RAM には、 電源の供給がなくなる と内 容が消えてしまうという特徴があるために、 揮発性メモリ と呼ばれることもある。その ため、電源を切った後も保存しておきたい情報は 補助記憶装置 に退避させておき、必要 に応じてメモリに呼び出す必要がある。 RAM には、一定時間たつとデータが消失してしまう DRAM （ Dynamic RAM ）と、電 ","33 源を切らない限り内容を保持している SRAM （ Static RAM ）の 2 種類がある。 主記憶装置に使うメモリには、コストと容量の関係で DRAM が用いられるが、プロセッ サがメモリに直接アクセスすることが多くなると処理速度の低下が起こるので、高速 な キャッシュメモリ を間に置いて両者のギャップを埋める。 メモリに用いられる DRAM は、現在ではほとんどが、システムのバスと同期して動作す る SDRAM （ Synchronous DRAM ）となっている。 ROM は、電気の供給がなくても記憶を保持できるため、 不揮発性メモリ と呼ば れることもあり、書き換えが不可能な マスク ROM と、書き込みが可能な PROM （ Programmable ROM ）がる。 書き込みが可能な ROM は、記憶を保持する機器として様々な場面で利用されており、ブ ロック単位での消去や書き込みを行う フラッシュメモリ や、結晶状態と非結晶状態の違 いを利用して情報を記憶する 相変化メモリ がある。 キャッシュメモリ は、プロセッサとメモリの性能差を埋めるために両者の間で用いるメ モリであり、高速である必要があるため、 SRAM が用いられる。近年では CPU のチッ プ内に取り込まれ、内蔵されることが一般的である。 キャッシュメモリは、アドレス管理を効率的に行い、処理を高速化するために、データ の格納方法や更新方式に様々なアーキテクチャを採用しており、その効果は ヒット率 に よって変わってくる。 最近の CPU には、キャッシュメモリを多段構成にして、CPU に近い順に 1 次キャッシュメモリ 、 2 次キャッシュメモリ とするものが多く見られる。 キャッシュメモリでデータを管理する時は、 ブロック と呼ばれる一定長の単位にまと ","34 める。 ダイレクトマップ方式 は、メモリのアドレスごとに、キャッシュメモリの格納場所が一 つに決まる方式である。メモリのアドレスさえわかれば場所が特定できるため検索は容易 だが、その分データの衝突が起こりやすくなり、 ヒット率 が下がる。 フルアソシアティブ方式 は、アドレスによる振り分けを行わず、キャッシュメモリの空 いているブロックならどこでも使える方式である。キャッシュメモリがいっぱいになるま でデータの衝突は起こらないが、データの使用時に毎回全てのブロックを検索する必要が あるため、 応答速度 に問題が出てくる。 セットアソシアティブ方式 は、キャッシュメモリを複数のグループに分け、そのグルー プ内ならどこでも使えるという方式であり、ダイレクトマップ方式とフルアソシアティブ 方式の双方の長所をそれぞれ取り入れたものになっている。 セットアソシアティブ方式とフルアソシアティブ方式では、 連想メモリ （ CAM ： Content Addressable Memory ）を使用することで検索を高速化している。 ライトスルー方式 は、プロセッサがキャッシュメモリに書き込みを行った時、その内容 を同時にメモリにも転送するデータ更新方式であり、単位時間の処理量（ スループット ） が悪くなるという制約があるが、データの一貫性（ コヒーレンシ ）は保たれる。 ライトバック方式 は、プロセッサがキャッシュメモリに書き込んでも、すぐにはメモリ に転送しないデータ更新方式であり、キャッシュメモリのデータがメモリに追い出される などの条件を満たした場合にのみメモリに書き込まれる。 スルーヒット はよくなるが、 コヒーレンシ が保たれないことがある。 キャッシュメモリを用いて CPU とメモリがやりとりするときの、データがキャッシュメ モリ上にある確率のことを ヒット率 という。 ヒット率 P がわかることで、キャッシュメモリに存在する場合もしない場合も含めた平 均的なアクセス時間（ 実効アクセス時間 ）を次式で計算することができる。 ","35 T 実行アクセス時間 = T キャッシュメモリへのアクセス時間 · P + T メモリへのアクセス時間 · (1 − P ) CPU とメモリとのデータ転送を高速化する技術の一つである メモリインタリープ では、 データを複数の メモリバンク に順番に分割して配置しておき、データを読み出す時には その複数のメモリバンクにほぼ同時にアクセスすることで、効率良くデータを取り出す。 ファーストフィット方式 は、記憶領域の空き領域をアドレスの下位から順に検索し、最 初に見つかった空き領域を割り当てる管理方式である。 ベストフィット方式 は、記憶領域の空き領域のうち、要求された大きさを満たす最小の ものを割り当てる管理方式である。 24 バス バス とは、コンピュータ内部でデータをやりとりするための伝送路である。 1 ビットずつデータを転送するバスを シリアルバス 、データの複数ビットを一塊にして 複数本の伝送路で送るバスを パラレルバス という。 PC が普及した初期の頃は シリアルバス が中心、その後 パラレルバス が主流になった が、複数の伝送路で送ると干渉が発生するため、高周波信号で高速にデータを送るに は シリアルバス が適しているということから、近年ではまた シリアルバス が主流になっ てきている。 USB は、コンピュータの周辺機器を接続するための シリアル バス規格の一つで、マウ スやキーボードなど、様々な周辺機器を接続できる。USB ケーブルから電力を供給して 周辺機器を動作させる バスパワー を利用することが可能である。 ","36 規格 スピードモード 最大データ転送速度 USB 1.1 フルスピード 12M ビット／秒 USB 2.0 ハイスピード 480M ビット／秒 USB 3.0 スーパースピード 5G ビット／秒 USB 3.1 スーパースピードプラス 10G ビット／秒 IEEE 1394 は AV 機器などとコンピュータを接続する シリアル バス規格の一つで、アッ プルが提唱した FireWire を標準化したものである。ソニーでは i.LINK と呼んでいる。 PC のポートから DVD ドライブ、DVD ドライブのポートからハードディスク、というよ うに数珠つなぎに連結する デイジーチェーン 方式を採用している。 ATA （ Advanced Technology Attachment ）はコンピュータとハードディスク間のイン ターフェース規格で、 パラレル バスの一つであるため、 パラレル ATA とも呼ばれる。 シリアル ATA はパラレル ATA をシリアルバスにして高速化したインターフェース規格 であり、現在主流になっているハードディスクや SSD、光学ドライブを接続する規格で ある。 ホストコントローラ と ポイントツーポイント で周辺機器を接続する。 Bluetooth はデジタル機器用の近距離無線通信規格の一つであり、 IEEE 802.15.1 で規 格化されている。 2.4GHz 帯を利用して、マウスやキーボード、携帯ヘッドセットなどの 周辺機器を接続する。 Bluetooth はバージョン 4.0 で大幅に省電力化され、この省電力化された規格を BLE （ Bluetooth Utility Network ）という。 ZigBee はセンサネットワークで用いられる低電力で低速の規格であり、 IEEE 802.15.4 で規格化されている。 IEEE 802.15.4 を拡張した IEEE 802.15.4g をベースに相互接続を行う無線通信規格に、 Wi-SUN （ Wireless Smart Utility Network ）がある。 DisplayPort は、液晶ディスプレイなどの出力装置のために設計された映像出力インター ","37 フェースの規格である。 25 入出力デバイス 入出力デバイス とは、入出力装置や補助記憶装置などの機器である。 入出力デバイスとコンピュータをつなぎ、 データをやりとりするのが 入出力インターフェース である。 デバイスにインターフェースを提供するソフトウェアが デバイスドライバ である。 DMA （ Direct Memory Access ）制御方式では、 DMA コントローラ を用いて、メモ リとメモリ間のデータ転送を、CPU の指示により、CPU を通さずに行う。 チャネル 制御方式では、CPU の指示ではなく、専用ハードウェアの チャネル装置 が独 自に動作し、データ転送を CPU を通さずに行う。 26 入出力装置 プログラム内蔵方式の装置では、 入力装置 でデータを入力し、 出力装置 でデータを出 力する。さらに、記憶装置のデータを永続的に保存しておくために 補助記憶装置 を使用 する。 ディスプレイにおける 単純マトリクス方式 とは、X 軸方向と Y 軸方向の 2 方向から電圧 をかけて、交点の液晶を駆動させる方式である。 ディスプレイにおける アクティブマトリクス方式 とは、単純マトリクス方式に加え、各 液晶にアクティブ素子を配置させた方式である。 STN （ Super-Twisted Nematic ） 液晶ディスプレイ は、 単純マトリクス方式を採用し ","38 たディスプレイである。 TFT （ Thin Film Transistor ） 液晶ディスプレイ は、薄型トランジスタを使い、アク ティブマトリクス方式を採用したディスプレイである。 電圧をかけると発光する物理現象を EL （ Electro-Luminescence ）という。 有機 EL ディスプレイ とは、有機発光素子を利用したディスプレイであり、低電力で高 い輝度を得ることができる。 主記憶装置を補助する補助記憶装置にはいろいろな記憶媒体（ リムーバブルメディア ） があり、 磁気ディスク ・ 光ディスク ・ 半導体ディスク ・ 磁気テープ の 4 種類に大別 される。 ハードディスク は、磁性体を塗布した円盤を重ねた記憶媒体であり、 磁気ディスク の一 種である。数 T バイト程度の大容量のデータを格納することができる。 CD（ Compact Disc ）はデジタル情報を記録するための 光ディスク の一種であり、デー タの変更ができない CD-ROM や、追記のみ可能な CD-R 、書き換え可能な CD-RW な どがある。 DVD （ Digital Versatile Disc ）は、CD とほぼ同じ形式であり、 CD よりはるかに大きい記憶容量をもつ 光ディスク の一種である。 • データの変更ができない DVD-ROM • 追記のみ可能な DVD-R や DVD+R • 書き換え可能な DVD-RW や DVD-RAM 、 DVD+RW などがある。 CD は 700M バイト程度が限界であるのに対し、DVD は片面 1 層で 4.7G バイト、両面 ","39 2 層で 17.08G バイトの容量をもつ。 Blu-ray Disc は青紫色半導体レーザーを使用する 光ディスク の一種である。DVD より 大容量で、一層で 25G バイト、二層で 50G バイトを実現している。データの変更ができ ない BD-ROM や、追記のみ可能な BD-R 、書き換え可能な BD-RE がある。 フラッシュメモリ は、書き換え可能で、電源を切ってもデータが消えない半導体メモリで あり、 EEPROM の一種である。記憶媒体としても、 USB メモリ や SD メモリカード 、 SSD （ Solid State Drive ）、 メモリスティック など様々な形態で用いられている。 SD メモリカードには、上位規格として、 SDHC （ SD High Capacity ）と SDXC （ SD eXtended Capacity ）がある。 SDHC は、ファイルシステムに FAT32 を採用し、最大 32G バイトの容量をもつ。 SDXC は、ファイルシステムに exFAT を採用し、最大 2T バイトの容量をもつ。 DAT （ Digital Audio Tape ）は 磁気テープ の一種であり、 デジタル音声データを録音するための規格だが、データのバックアップなどでも用いられ る。 DDS （ Digital Data Storage ）とも呼ばれる。 DAT72 では 32G バイト、DAT320 では 160G バイトのデータを記録可能である。 第 VIII 部 システム構成要素 27 システムの構成 デュアルシステム とは、二つのシステムを用意し、並列して同じ処理を走らせて、結果 を比較する方式である。結果を比較することで高い信頼性が得られ、一つのシステムに障 ","40 害が発生しても、もう一つのシステムで処理を続行することができる。 デュプレックスシステム では、二つのシステムを用意するが、普段は一つのシステム （ 主系 、 現用系 ）のみ稼働させて、もう一方のシステム（ 従系 、 待機系 ）は待機させ ておく方式である。 ホットスタンバイ はデュプレックスシステムにおけるスタンバイ方式の一つであり、従 系のシステムを常に稼働可能な状態で待機させておく方式である。サーバを立ち上げてお き、アプリケーションや OS なども全て主系のシステムと同じように稼働させておくた め、主系に障害が発生した場合には、すぐに従系への切り替えが可能である。 故障が起こった時に自動的に従系に切り替えて処理を継続することを フェールオーバ と いう。 ウォームスタンバイ はデュプレックスシステムにおけるスタンバイ方式の一つで、従 系のシステムを本番と同じような状態で用意しておくが、すぐには稼働できない状態で待 機させておく方式である。サーバは立ち上がっているものの、アプリケーションは稼働し ていないか別の作業を行っているかで、切り替えに少し時間がかかる。 コールドスタンバイ はデュプレックスシステムにおけるスタンバイ方式の一つであり、 従系のシステムを機器の用意だけして稼働せずに待機させておく方式である。電源を入れ ずに予備機だけを用意しておいて、障害が発生したら電源を入れて稼働し、主系の代わり になるように準備するため、主系から従系への切り替えに最も時間がかかる方法である。 クライアントサーバシステム とは、クライアントとサーバでそれぞれ役割分担して、協 力して処理を行うシステムである。 3 層クライアントサーバシステムにおける プレゼンテーション層 は、ユーザインター フェースを受け持つ層である。 3 層クライアントサーバシステムにおける ファンクション層 （ アプリケーション層 ／ ロジック層 ）は、メインの処理やビジネス ","41 ロジックを受け持つ層である。 3 層クライアントサーバシステムにおける データベースアクセス層 は、データ管理を受 け持つ層である。 RAID （ Redundant Arrays of Inexpensive Disks ）は、複数台のハードディスクを接続 して全体で一つの記憶装置として扱う仕組みである。複数台のディスクを組み合わせるこ とによって信頼性や性能が上がる。 RAID0 は RAID の一種であり、複数台のハードディスクにデータを分散することで高速 化（ ストライピング ）する方式である。 性能 は上がるが、 信頼性 は 1 台のディスクに 比べて低下する。 RAID1 は RAID の一種であり、複数台のハードディスクに同時に同じデータを書き込み （ ミラーリング ）する方式である。2 台のディスクがあっても、一方は完全なバックアッ プであるため、 信頼性 は上がるが、 性能 は特に上がらない。 RAID0+1 は、ストライピングされたディスクを ミラーリング することで、性能と信頼 性の両方を向上させる技術であり、最低でも 4 台のディスクを必要とする。 RAID1+0 は、ミラーリングされたディスクを ストライピング することで性能と信頼性 の両方を向上させる技術であり、最低でも 4 台のディスクを必要とする。 RAID3 や RAID4 では、複数台のディスクのうち 1 台を誤り訂正用のパリティディスク にし、誤りが発生した場合に復元を行う。パリティディスクに他のディスクの偶数パリ ティを計算したものを格納しておくことで、片方のデータ格納用ディスクが故障した場合 にも、もう片方のデータディスクとパリティディスクから偶数パリティを計算することで、 故障したディスクのデータが復元できる。この処理をビットごとに行う方式が RAID3 、 ブロックごとにまとめて行う方式が RAID4 である。 RAID4 のパリティディスクは誤り訂正専用のディスクであり、通常時は使わないが、デー タを分散させた方がアクセス効率が上がるため、パリティを ブロック ごとに分散し、通 ","42 常時にも全てのディスクを使うようにした方式（ RAID5 ）が生まれた。 RAID5 では 1 台のディスクが故障しても他のディスクの 排他的論理和 を計算することで 復元できるが、ディスクは同時に 2 台壊れることもある。そこで、冗長データを 2 種類作 成することで、2 台のディスクが故障しても支障がないようにした方式（ RAID6 ）が生 まれた。 システムの一部で障害が起こっても、全体でカバーして機能停止を防ぐという設計手法 を フォールトトレランス という。 個々の機器の障害が起こる確率を下げて、全体として信頼性を上げるという考え方 を フォールトアボイダンス という。 フェールセーフ は、システムに障害が発生した時、安全側に制御する方法である。具体 的には、信号が故障した時にはとりあえず赤を点灯させるなど、障害が新たな障害を生ま ないように制御し、処理を停止させることもある。 フェールソフト は、システムに障害が発生した時、障害が起こった部分を切り離すなど して最低限のシステムの稼働を続ける方法である。 フェールソフトにおいて、機能を限定的にして稼働を続ける操作を フォールバック （ 縮退運転 ）という。 フォールトマスキング とは、機器などに故障が発生した時、その影響が外部に出ないよ うにする方法である。具体的には、装置の冗長化などによって、1 台が故障しても全体に 影響が出ないようにする。 フールプルーフ とは、利用者が間違った操作をしても危険な状態にならないようにする か、そもそも間違った操作ができないようにする設計手法である。（画面上で押してはい けないボタンは押せないようにする、など） クラスタ（ クラスタリング ）とは、複数のコンピュータを結合してひとまとまりにしたシ ","43 ステムである。負荷分散（ ロードバランス ）や、 HPC （ High-Performance Computing ： 高性能計算）の手法としてもよく使われる。 シンクライアント は、ユーザが使うクライアントの端末には必要最小限の処理を行わせ、 ほとんどの処理をサーバ側で行う方式である。 ピアツーピア （ P2P ）は、端末同士で対等に通信を行う方式である。クライアントサー バ方式と異なり、サーバを介さずクライアント同士で直接アクセスするのが特徴である。 分散処理システム は、複数のプログラムが並列的に複数台のコンピュータで実行され、 それらが通信しあって一つの処理を行うシステムである。複数の場所で処理を行っていて も、利用者にはその場所を意識させず、どこにあるプログラムも同じ操作で利用できるこ と（ アクセス透過性 ）が大切である。 CDN （ Contents Delivery Network ）とは、動画や音声などの大容量のデータを利用す る際に、インターネット回線の負荷を軽減するようにサーバを分散配置する手法である。 ストレージ は、ハードディスクや CD-R など、データやプログラムを記録するための装 置である。 DAS （ Direct Attached Storage ）は、サーバにストレージを直接接続する従来の方法 である。 SAN （ Storage Area Network ）は、サーバとストレージを接続するために専用のネッ トワークを使用する方法である。 ファイバチャネル や IP ネットワーク を使って、あた かも内蔵されたストレージかのように使用することができる。 NAS （ Network Attached Storage ）は、ファイルを格納するサーバをネットワークに 直接接続することで、外部からファイルを利用できるようにする方法である。 コンピュータの物理的構成と、それを利用する時の論理的な構成を自由にする考え方 を 仮想化 という。具体的には、仮想 OS を用いて 1 台の物理サーバ上で複数の仮想マシ ","44 ンを走らせ、それぞれを 1 台のコンピュータとして利用することや、 クラスタリング で 複数台のマシンを一つにまとめたりすることである。 サーバの仮想化方式には、次のようなものがある。 • OS の上にアプリケーションをインストールして仮想マシンを実行する ホスト 型 • 物理マシンに仮想 OS を直接インストールする ハイパーバイザ 型 • OS の上にコンテナエンジンを入れ、その中に コンテナ という分割した仮想領域 を作成する コンテナ 型 サーバの性能を上げるための方法には、次のようなものがある。 • サーバのハードウェアを高性能なものにする スケールアップ • サーバの数を増やすことで性能を上げる スケールアウト 仮想サーバでは、この二つの方法を同時に使い、 スケールアップ したサーバ上で仮想 サーバをいくつも動かす方法がよく取られる。 シンプロビジョニング は、サーバではなくハードディスクなどのストレージを仮想化す る方法である。仮想的なディスクドライブを設定することで、サーバは実際の物理的な容 量を意識せず、大容量が割り当てられているものとして運用することができる。 ライブマイグレーション は、仮想サーバで稼働している OS やソフトウェアを停止する ことなく、他の物理サーバへ移し替える技術である。サーバ障害時に切り替えることで処 理を継続できる。 VDI （ Virtual Desktop Infrastructure ： デスクトップ仮想化 ）は、アプリケーション やデータをサーバで管理し、PC（ シンクライアント 端末）では通信・操作のみ実行する 方式である。 VDI サーバで作成された画面を シンクライアント 端末に転送する、画面転 送型の シンクライアント に該当する。 クラウド上で VDI サーバを用意し、それをサービスとして利用する ","45 DaaS （ Desktop as a Service ）もある。 エッジコンピューティング は、端末の近くにサーバを分散配置することで、ネットワー クの負荷分散を行う手法である。ネットワークでの遅延が少なくなり、高速化も実現で きる。 28 システムの評価指標 レスポンスタイム （ 応答時間 ）は、システムにデータを入力し終わってからデータの応 答が開始されるまでの時間であり、「 速く返す 」ことを表す指標である。 データの入力が始まってから応答が完全に終わるまでの時間を ターンアラウンドタイム という。 スループット は、単位時間あたりにシステムが処理できる処理数であり、「 数多く返す 」 ことを表す指標である。 ベンチマーク は、システムの処理速度を計測するための指標であり、特定のプログラム を実行し、その実行結果を基に性能を比較する。 オンライントランザクション処理のベンチマークとして有名なのは、 TPC （ Transaction Processing Performance Council ： トランザクション処理性能評議会 ） が作成している TPC-C である。 整数演算のベンチマークとして有名なのは、 SPEC （ Standard Performance Evaluation Corporation ：標準性能評価法人） が作成している SPECint である。 ","46 また、浮動小数点演算のベンチマークとして、同団体が作成している SPECfp がある。 モニタリング は、システムを実際に稼働させて、その性能を測定する手法である。シス テムの性能改善時に用いられる。 コンピュータ資源の利用状況、負荷状況のことを ワークロード という。 システムに必要な規模や性能を見極めて、構成要素を用意することを サイジング という。 キャパシティプランニング とは、システムに求められるサービスレベルから、システム に必要なリソースの処理能力や容量、数量などを見積もり、システム構成を計画すること であり、次の 3 つの手順で行われる。 1. ワークロード情報の収集 2. サイジング 3. 評価 ・ チューニング MTBF （ Mean Time Between Failure ： 平均故障間隔 ）は、故障が復旧してから次の 故障までにかかる時間の平均であり、連続稼働できる時間の平均値にもなる。 MTTR （ Mean Time To Repair ： 平均復旧時間 ）は、故障したシステムの復旧にかか る時間の平均である。 稼働率 は、ある特定の時間にシステムが稼働している確率であり、次式で求められる。 稼働率 = MTBF MTBF + MTTR 故障率 （ 不稼働率 ）は、ある特定の時間にシステムが稼働していない確率であり、次式 で計算される。 故障率 =1 − 稼働率 ","47 故障率 は、単位時間内にどの程度の確率で故障するかを表したものともされ、その場合 は次式で計算される。 故障率 = 1 MTBF システムの信頼性を総合的に評価する基準として、 RASIS という概念がある。次の 5 つ の評価項目を基に信頼性を判断する。 1. Reliability （ 信頼性 ） 2. Availability （ 可用性 ） 3. Serviceability （ 保守性 ） 4. Integrity （ 保全性 ・ 完全性 ） 5. Security （ 機密性 ） RASIS における Reliability （ 信頼性 ）は、故障や障害の発生しにくさ、安定性を表し、 具体的な指標としては MTBF やその逆数の 故障率 がある。 RASIS における Availability （ 可用性 ）は、稼働している割合の多さ、稼働率を表し、 具体的な指標としては 稼働率 が用いられる。 RASIS における Serviceability （ 保守性 ）は、障害時のメンテナンスのしやすさ、復旧 の速さを表し、具体的な指標としては MTTR が用いられる。 RASIS における Integrity （ 保全性 ・ 完全性 ）は、障害時や過負荷時におけるデータの 書き換えや不整合、消失の起こりにくさを表し、一貫性を確保する能力である。 RASIS における Security （ 機密性 ）は、情報漏洩や不正侵入の起こりにくさを表し、セ キュリティ事故を防止する能力である。 機器を並列に並べたシステム（ 並列システム ）は、どれか一つが稼働していれば全体で ","48 稼働していることになるため、 稼働率 が向上する。 A， B の二つの機器がある並列システムで、それぞれの稼働率が a， b だとする。このシス テムは、A，B どちらも動かない時以外は稼働するので、稼働率は 1 − (1 − a)(1 − b) と なる。 機器を直列に並べたシステム（ 直列システム ）は、全て稼働していなければ全体で稼働 しないため、 稼働率 が低下する。 A，B の二つの機器がある直列システムで、それぞれの稼働率が a，b だとする。このシ ステムは、A，B どちらも動く時だけ稼働するので、稼働率は ab となる。 第 IX 部 ソフトウェア ソフトウェア は、コンピュータ上で動くプログラムであり、 • 特定の作業を目的とした アプリケーションプログラム • ハードウェアの管理や基本的な機能を提供する オペレーティングシステム • 上記 2 つの中間で制御を行う ミドルウェア がある。 29 オペレーティングシステム オペレーティングシステム （ OS ： Operating System ）は、ハードウェアを抽象化し たインタフェースをアプリケーションプログラムに提供するソフトウェアである。 コンピュータの電源を入れた時に OS は自動的に起動し、通常の操作が可能になるように ","49 プログラムを立ち上げる。そのときの一連の処理の流れを ブートストラップ という。 コンピュータの ROM に ブートストラップローダ と呼ばれる特殊なプログラムが用意さ れており、それがブートストラップを起動して実行する。 ジョブ管理 は OS がもつ管理機能の一つであり、一つのまとまった仕事の単位であ る ジョブ を、それを構成する ジョブステップ ごとに管理する。 ジョブ管理は、メインフレームなどの汎用機では OS に組み込まれており、 JCL （ Job Control Language ）というジョブ制御用のスクリプト言語を使用して、バッチ 処理やプロセスの起動を制御する。 動作中のプログラムの実行単位を タスク （ プロセス ）という。 近代的な OS は、一度に複数のタスクを実行できる マルチタスク OS だが、一つの CPU では一度に一つのタスクしか処理できないため、OS はいつどのタスクを生成・実行・消 滅させるかということを管理する。 一つのタスクは一つ以上の スレッド から構成され、CPU の利用は スレッド 単位で行わ れる。 タスクの実行では、タスクを • 実行状態 • 実行可能状態 • 待ち状態 の 3 つの状態に分けて管理する。 タスクは生成されるとまず 実行可能状態 に な る 。そ こ で CPU に空きができる と 実行状態 に移り、処理を実行する。実行中に入出力が必要な処理など、CPU 以外を使 用する処理が始まると 待ち状態 に移り、入出力が完了するとまた 実行可能状態 になる。 ","50 実行状態でタスクを実行中に次のようなことが起こると、 実行可能状態 に戻る。 • タイムクォンタム （一つのタスクに割り当てられた時間）を使い切る • 実行状態のタスクを中断させる プリエンプション が発生 プリエンプション は次のような場合に発生する。 • 他に優先度の高いタスクが生成された場合 • 割込みが起こった場合 到着順方式 は、タスクを到着順で処理する方式であるため、 • FIFO （ First In First Out ） • FCFS （ First Come First Served ） とも呼ばれる。 処理時間順方式 は、タスクの処理時間が短いものから順に処理を行う方式であるため、 • SPT （ Shoutest Processing Time First ） とも呼ばれる。 優先度順方式 では、タスクを優先度順で処理する方式である。 ラウンドロビン方式 は、一つ一つのタスクに同じ タイムクォンタム を割り当て、一定時 間ごとに順番に処理を回していく方式である。 プリエンプション方式 （ プリエンプティブ方式 ）は、タスクに優先度をつけ、優先度の 高いタスクが実行可能状態になると プリエンプション を発生させる方式である。 多段フィールドバック待ち行列 は、複数の優先度の待ち行列をもち、高い優先度の待ち ","51 行列から順次処理していく方式である。この時、 • 低い優先度で長時間待っているタスクの優先度をあげる • 一度実行したタスクの優先度を下げる などの フィードバック調整 を行う。 イベントドリブンプリエンプション方式 は、 • 割込みによってタスクの切り替えを行う イベントドリブン方式 • 優先度の高いタスクを実行させる プリエンプション方式 を組み合わせた方式である。 リアルタイム OS は、リアルタイム処理を行う OS である。 リアルタイム処理では、 ジョブの実行が決められた時間までに終了するという 時間制約 を 守ることが最優先される。 記憶管理 は OS がもつ管理機能の一つであり、コンピュータ上の記憶を管理する。 コンピュータの記憶は 主記憶装置 に格納されているが、主記憶が足りない時に は 仮想記憶 を用いて容量を大きくする。 そのため、記憶管理には、 • 実記憶管理 • 仮想記憶管理 の 2 種類がある。 オーバレイ は、あらかじめプログラムを分けて補助記憶装置に格納しておき、必要な部 分だけ主記憶装置に置く記憶管理の方法である。 仮想記憶 をサポートする前の OS で使 われており、プログラマが考えて指定する。 オーバレイで記憶領域を割り当てる方式には、 ","52 • 最初の空き領域を割り当てる ファーストフィット方式 • 割り当てたときの残り領域が最も小さくなる ベストフィット方式 などがある。 スワッピング とは、メモリの内容を補助記憶装置の スワップファイル に書き出して、他 のタスクがメモリを使えるように解放することである。 • メモリからスワップに取り出すことを スワップアウト • スワップからメモリに戻すことを スワップイン という。 記憶領域の管理方法には、 • プログラムの大きさに応じて可変の区画を割り当てる 可変区画方式 • 主記憶とプログラムを固定長の単位（ ページ ）に分割して管理する 固定区画方式 の 2 種類がある。 ページング では、プログラムを固定長のページに分けて、ページごとに補助記憶装 置の 仮想記憶領域 に取り出す。 • メモリから仮想記憶に取り出すことを ページアウト • 仮想記憶からメモリに戻すことを ページイン という。 メモリ上に必要なページがないことを ページフォールト という。 ページフォールトが頻繁に起こってページインとページアウトが繰り返されること を スラッシング といい、システムの 応答速度 が急激に低下する。 仮想記憶 とは、コンピュータに実装される主記憶装置（メモリ）よりも大きな空間をメ ","53 モリ空間として利用できるようにする技術である。 補助記憶 上に 仮想記憶領域 を用意 し、そこに OS が自動的にデータを出し入れする。 仮想記憶の方式には、 • 固定長のページ単位で管理を行う ページング方式 • 可変長の区画で管理を行う セグメント方式 の 2 種類がある。 ページング方式によるページの置き換えのアルゴリズムには、次のようなものがある。 • 最初にページインしたページを最初にページアウトする FIFO （ First In First Out ）方式 • 最後に使用されてからの経過時間が最も長いページを最初にページアウトさせる LRU （ Least Recently Used ）方式 • 使用頻度が最も低いページを最初にページアウトさせる LFU （ Least Frequently Used ）方式 プログラムの実行時には、次のような記憶領域が用意される。 • プログラムを格納する プログラム領域 • 一時的にデータ（関数の戻り値や一時変数 etc.）を置くための スタック領域 • メモリ確保命令を用いて動的に確保可能な ヒープ領域 ヒープ領域で確保した命令は、メモリ解放命令で解放しないと メモリリーク という障害 が起こる。それを避けるために、Java 言語などでは、 ガーベジコレクション という機能 を用いて、不要に確保された領域を自動的に解放する。 データ管理 は OS がもつ管理機能の一つであり、補助記憶装置へのアクセスを管理する。 ","54 入出力管理 は OS がもつ管理機能の一つであり、入出力装置へのアクセスを管理する。 OS では、 スプーリング などを用いて、複数の周辺装置を同時並行で動作させることが できる。 30 ミドルウェア ミドルウェア は、OS とアプリケーションソフトウェアの中間に位置するソフトウェア である。 API （ Application Programming Interface ）は、アプリケーションから利用できる、 OS などのシステムの機能を利用する関数などのインターフェースである。 Web サイトで利用する API のことを WebAPI という。 シェル は、利用者からの指示をコマンドで受けつけて解釈し、プログラムを起動・制御 したり、 カーネル の機能を呼び出したりする役割を持っている。 デーモン とは、UNIX などのマルチタスク OS においてバックグラウンドで動作するプ ログラムであり、プログラム名の末尾に d がつく。 • インターネットサービスを管理する inetd • Web サーバを管理する httpd • プリンタを管理する lpd などがある。 開発フレームワーク とは、システム開発を標準化して効率的に進めるための全体的な枠 組みである。ソフトウェアをどのように開発すべきかを、再利用可能なクラスなどによっ ","55 て示し、特定の用途に使えるようにしている。 分散処理技術 とは、大規模なデータを複数のサーバ上に分散して処理する技術のことで ある。 分散処理技術を実現するためのソフトウェアフレームワークの代表的なものに • Apache Hadoop （ Hadoop ） がある。 31 開発ツール 開発ツールには、 • ソフトウェア開発の各工程の効率化や自動化を目的にする CASE ツール • 開発作業全体を一貫して支援する IDE （ Integrated Development Environment ： 統合開発環境 ） • プログラミングを支援する プログラミングツール • プログラミング言語を処理する 言語処理ツール などがある。 31.1 プログラミングを支援するツール トレーサ は、デバッグ時に実行経路を表示するプログラミングツールである。 インスペクタ は、デバッグ時にデータ内容を表示するプログラミングツールである。 エディタ は、プログラムのソースコードを編集するプログラミングツールである。 リポジトリ は、成果物を一元管理するデータベースであり、プログラム以外にもその ","31.2 言語プロセッサ 56 説明やデータ定義などを管理する。 バージョン管理 を行い、最新のデータ以外に、古い データとその差分を残す。 • リポジトリからデータを取り出すことを チェックアウト • リポジトリにデータを登録することを チェックイン という。 アサーションチェッカ とは、プログラムの途中に アサーション （論理的に成立すべき条 件）を登録して、満たしているかチェックするプログラミングツールである。 エミュレータ は、コンピュータや機械の動作を再現するプログラミングツールである。 シミュレータ は、実世界や仮想的な状況をモデル化して実験するシミュレーションを行 う プログラミングツール である。 スナップショット は、ある一時点のストレージの状態（ファイルとディレクトリの集合 など）をそのまま記録するプログラミングツールである。 プロファイラ は、プログラムの性能を改善するに当たって、関数・文などの実行回数や 実行時間を計測して統計を取るために用いるプログラミングツールである。 31.2 言語プロセッサ コンパイラ は、プログラム言語で書かれたプログラム（ ソースコード ）を、コンピュータ が実行可能な機械語に変換する言語処理ツールである。プログラムを解析し、 最適化 し てから機械語翻訳を行う。 インタプリタ は、ソースコードを順番に解釈しながら実行する言語処理ツールである。 クロスコンパイラ は、コンパイラが動作している環境以外に向けて実行ファイルを作成 ","57 する言語処理ツールである。 組み込みシステムでは、通常のコンピュータで クロスコンパイル を行い、実行ファイル を組み込む。 アセンブラ は、アセンブリ言語を機械語に翻訳する言語処理ツールである。 プログラムジェネレータ は、あるパラメータを設定し、そのパラメータからプログラム 言語のソースコードを自動生成する言語処理ツールである。 コンパイラ最適化 は、コンパイルを行う際、実行ファイルを効率化して、実行時間・メ モリ使用量・消費電力などを最小化する処理である。 ループ最適化 では、ループ内で変化がない ループ不変式 をループ外に移動させるなど の方法により、ループ内の処理量を減らす。 局所最適化 では、 局所参照性 （メモリ内の近い位置を参照すること）を増大させること で、 アクセス効率 を高める。 プロシージャ間最適化 では、 ソースコード全体を解析して、関数を インライン展開 する （関数そのもののコードを展開し、関数を呼び出さないようにする）などの方法により最 適化する。 32 オープンソースソフトウェア OSS （ Open Source Software ： オープンソースソフトウェア ）とは、 OSI （ Open Source Initiative ）によって推進されており、次の条件を満たすソフトウェ アとして定義されている。 1. 有料で販売 する場合も含めて、自由に 再頒布 できること 2. ソースコード を公開すること 3. 派生物 の作成と、それを 同じライセンス で頒布することを許可すること 4. 基本ソース と パッチ （差分情報）というかたちで頒布することを義務付けても構 ","58 わない 5. 個人 や グループ に対する差別をしないこと 6. 利用する分野 に対する差別をしないこと 7. ライセンス分配に 追加ライセンス を必要としないこと 8. 特定製品でのみ有効 なライセンスにしないこと 9. 他のソフトウェア を制限するライセンスにしないこと 10. ライセンスは 技術的な中立 を保つこと Apache HTTP Server （ Apache ）は、Web サーバを構築する OSS である。 Postfix は、メールサーバを構築する OSS である。以前は Sendmail が有名だったが、 安全性の問題で置き換わりつつある。 BIND は、DNS サーバを構築する OSS である。 MySQL や PostgreSQL は、リレーショナルデータベースを構築する OSS である。 Linux は、OSS の UNIX 系 OS であり、 いろいろな配布パッケージ（ ディストリビューション ）で配布されている。 Perl ・ PHP ・ Ruby ・ Python などは、OSS のプログラム言語である。 OpenStack は、クラウドコンピューティングのための OSS であり、仮想マシンやその 他のリソースを提供することで、 パブリッククラウド と プライベートクラウド の両方 を実現することができる。 オープンソースライブラリ は、プログラミングで利用できる部品（クラスや関数など） をまとめたものであり、部品のソースコードもオープンソースで公開されている。 ディープラーニングを高速に実現するためのライブラリには、次のようなものがある。 • TensorFlow ","59 • Chainer • PyTorch ディープラーニングでの実装を容易にするための ラッパーライブラリ （TensorFlow な どのライブラリに重ねて用いるライブラリ）に、 Keras がある。 OpenCV は、画像の変換やフィルタ処理など様々な画像処理を行うためのライブラリで あり、画像処理に関する機械学習なども実現できる。 OSS の信頼性は、次のような軸で評価する。 • ソフトウェア自体の 信頼性 • メンテナンス の容易さ • 法的問題 の有無 • 開発コミュニティの サポート体制 IPA （ 独立行政法人情報処理推進機構 ）では、 OSS の信頼性評価ツールを整備し、 OSS プロジェクトを評価するための基準を提供している。 コピーレフト は、著作権を保持したまま、二次的著作物も含めて、全ての人が著作物を 利用・改変・再頒布できなければならないという考え方である。 デュアルライセンス は、一つのソフトウェアを異なる 2 種類以上のライセンスで配布す る形態であり、利用者はそのうちの一つのライセンスを選んで利用する。 GPL （ General Public License ）は、 OSS のライセンス体系の一つで、 コピーレフトの 考え方に基づく。 GPL のソフトウェアを再頒布する場合には、 GPL のライセンスを踏襲 する必要がある。 BSD （ Berkeley Software Distribution ） ライセンス は、OSS のライセンス体系の ","60 一つで、GPL に比べて制限の少ないライセンスである。 次の条件さえ守れば、自由に利用することができる。 • 無保証 であることの明記 • 著作権 及び ライセンス条文 の表示 第 X 部 ヒューマンインターフェース ヒューマンインターフェース とは、人間とコンピュータの間で情報をやり取りする際の 考え方であり、人間の特性を応用し、より直感的に認識できるような工夫をする。 33 ヒューマンインターフェース技術 インフォメーションアーキテクチャ とは、情報をわかりやすく伝えたり、情報を探しや すくしたりするための表現技術である。 Web サイト設計におけるインフォメーションアーキテクチャでは、次の 3 種類の要素が 用いられる。 • サイト構造 （Web サイトを分類し、階層構造で表現する） • ナビゲーション （Web サイト上で、ユーザが求める情報を探し出し、適切に利用できるようにする） • ラベル （メニューやボタンにつけられた、ユーザにとってわかりやすい名前） Web サイトにおいて、サイト構造を表現したページを サイトマップ という。 Web サイトのナビゲーションには、トップページからの道筋を示すことで今の位置がわ ","61 かる パンくずリスト などがある。 アクセシビリティ は、高齢者や障害者を含む様々な人が誰でもサービスや製品を利用で きる度合いのことである。 文字の判別が難しい人のために音声で画面情報を読み上げる技術を スクリーンリーダー という。 ユーザインターフェースを考える際の設計方針として ヒューリスティックス があるが、 この分野の第一人者であるヤコブ・ニールセンは次の 10 か条を提唱している。 1. システム状態の 視認性 2. システムと現実世界の 一致 3. ユーザの 主導権 と 自由 4. 一貫性 と 標準 5. エラー 防止 6. 想起 より 認識 7. 使用の 柔軟性 と 効率性 8. 美的 で 最小限 の設計 9. ユーザに対する エラー認識 、 判断 、 回復 の援助 10. ヘルプ と ドキュメント 化 34 インターフェース設計 ユニバーサルデザイン とは、文化・言語・国籍・年齢・性別・障害・能力といった差異を 問わずに利用できるデザインである。 アクセシビリティ とは、アクセスのしやすさや使いやすさのことである。 WAI （ Web Accessibility Initiative ）では、ユニバーサルデザインを実現するために、 ","62 Web アクセシビリティにおけるガイドラインを作成している。 Web アクセシビリティを向上させるための規格に JIS X 8341 がある。 モバイルファースト は、スマートフォンやタブレットなどのスマート端末でのアクセシ ビリティを向上させる手法である。 端末の大きさに応じて Web デザインを変更する レスポンシブ Web デザイン は、モバイ ルファーストを実現するための技術の一つである。 順番 コード（ シーケンス コード）では、連続した番号を順番に付与する。 桁別 コードは、桁ごとに意味を持たせるコードであり、先頭から、 大分類 、 中分類 、 小分類 などの階層を持たせる。 区分 コードでは、グループごとにコードの範囲を決めて値を割り当てる。 区分コードのうち、グループを連想できるようなコードのことを ニモニック コード （ 連想 コード）という。 ユーザビリティ とは、ユーザにとっての使いやすさの度合いであり、 • 有効さ • 効率 • 満足度 の三つの概念で表される。 ユーザビリティを評価するための方法には、次のようなものがある。 • 実際にユーザに使ってもらいながら問題点を洗い出す ユーザビリティテスト • 専門家がこれまでの経験に基づいて評価を行う ヒューリスティック評価 • 基準表を使用し、基準を満たしているかどうかをチェックする チェックリスト評価 ","63 第 XI 部 システム開発技術 開発プロセスを標準化し、共通の物差しとするための共通基盤として日本で考案され たのが、 共通フレーム という。国際標準のソフトウェアライフサイクルプロセス規 格 ISO ／ IEC 12207 を基に、日本独自の仕様としてまとめられた。現在のバージョン は 共通フレーム 2013 （ SLCP-JCF2013 ）である。 共通フレームでは、ソフトウェア開発及び取引の 明確化 のために、システム開発プロセ ス以外にも • 企画 プロセス • 要件定義 プロセス • 保守 プロセス • サービスマネジメント プロセス • 廃棄 プロセス • 監査 プロセス など、様々なプロセスを定義している。 共通フレームは、以下の階層構造で構成されている。 プロセス ＞ アクティビティ ＞ タスク ＞ 注記 プロセスを徐々に詳細化していき、最小単位が 注記 である。 35 システム要件定義 システム要件では、システム化の目標と対象範囲をまとめ、 ","64 • 機能および能力 • 業務・組織および利用者の要件 などを定義する。これらの要件を 機能要件 という。 また、その他の要件として、 • システム構成 要件 • 設計制約 条件 • 適格性確認 条件（開発するシステムが利用可能な品質であることを確認する基準） を定義し、開発環境を検討する。 システム要件では、機能要件だけでなく、それ以外のすべてである、 • 性能要件 • 信頼 性 • 拡張 性 • セキュリティ などの 非機能要件 を考慮することも大切である。 非機能要件はユーザへのヒアリングではなかなか出てこないため、 • 性能 要件 • データベース 要件 • セキュリティ 要件 • テスト 要件 • 移行 要件 • 運用 要件 • 保守 要件 など、あらかじめ項目を決めて定義する必要がある。 ","65 36 システム方式設計 システム方式の確立 では、 • ハードウェア • ソフトウェア • システム処理 • データベース の方式設計を行う。 これらのうち、 システム処理方式設計 では、 • Web システム • クライアントサーバシステム など、システムの 処理 方式を検討し、決定する。 プロジェクトの進行状況や成果物を適宜評価するために レビュー を行う。 ウォークスルー 方式のレビューでは、開発に携わった人が集まり、相互に検討を行う。 非公式に問題点を探し、解決策を検討する。 インスペクション 方式のレビューでは、成果物に対して、実際に動作させず人間の目で 検証する。責任者として モデレータ が任命され、レビュー作業全体を統括する。 システム方式設計に対し、 システム結合テスト を実施する。そのために、あらかじめ暫 定的なテスト 要求 事項や予定を定義、文書化しておく。 37 ソフトウェア要件定義 ソフトウェア要件定義 では、 • 品質特性 • セキュリティの仕様 ","66 • 安全性の仕様 • 人間工学的な仕様 • ソフトウェア品目とその周辺のインターフェース • データ定義およびデータベースに対する要件 などを確立し、文書化する。 プロセス中心アプローチ （ POA ： Process Oriented Approach ）とは、ソフトウェア の機能（ プロセス ）を中心としたアプローチである。 プロセス に着目し、システム を サブシステム に、さらに段階的に詳細化していき、最終的には最小機能の単位であ る モジュール に分割する。 • データの流れを表現する DFD （ Data Flow Diagram ） • プロセスの状態遷移を表現する 状態遷移図 などの図法が用いられ、プログラミングには • C 言語 などの 構造化 言語 がよく用いられる。 データ中心アプローチ （ DOA ： Data Oriented Approach ）とは、業務で扱うデータ に着目したアプローチである。まず、業務で扱うデータ全体について、 E-R 図 を用いて モデル化し、全体の E-R モデル を作成する。個々のシステムはこのデータベースを中心 に設計することによって、データの 整合 性や 一貫 性が保たれ、システム間のやりとりが 容易になる。（プログラミングとデータベースを分離する データ独立 という考え方） オブジェクト指向アプローチ （ OOA ： Object Oriented Approach ）とは、プログラム やデータをオブジェクトとして捉え、それを組み合わせてシステムを構築するアプローチ である。 表現図法としては、 • クラス 図や シーケンス 図などの UML が用いられ、プログラミングには ","67 • Java などの オブジェクト指向 言語 が用いられる。 DFD （ Data Flow Diagram ）は、プロセスを中心に、データの流れを記述する図で あり、 1. 入力データに対して何らかの処理を施し、データを出力する プロセス 2. データの保管場所である データストア 3. システム外に存在する、データを入力する作業者や出力する媒体、外部システムな どの 外部実体 （ ターミネータ 、 情報源 ） 4. 他の部品間でのデータの移動経路を矢印で表した データフロー の 4 つの要素で構成される。 段階別詳細化 （ トップダウンアプローチ ）では、最初にシステム全体の DFD を作成し、 それぞれのプロセスを別の DFD に詳細に記述する。プロセスがモジュールに対応できる まで、詳細化の工程を繰り返す。 既存のシステムや業務を新しいシステムとして作成する場合、 1. まず現在の業務を 新物理モデル として洗い出す 2. それを一般的に抽象化して 現論理モデル とし、 さらに新しくイメージした 新論理モデル を作成する 3. 最終的に、具体的な業務に落とし込んだ 新物理モデル を作成する 4. 現行業務で使用されているすべてのデータ項目を抽出し、 データディクショナリ に 登録しておく のようにモデル化して DTD を作成する手順もある。 UML （ Unified Modeling Language ： 統一モデリング言語 ）は、オブジェクト指向で 使われる表記法である。現行の最新バージョンである UML2.5 では、 13 種類のダイアグ ラム（図）が定義されており、必要に応じて適切な図を使い分ける。 UML で 構造 図の一種として定義されている クラス図 は、クラスの仕様とクラス間の関 ","68 連を表現する図であり、ほとんどのオブジェクト指向開発に用いられる。 E-R 図の発展 形だが、データのエンティティだけでなく、プロセスなどプログラムの静的な構造を表現 する。 UML で 振舞い図 のうちの 相互作用図 の一種として定義されている シーケンス図 は、 インスタンス間の相互作用を時系列で表現する図である。クラスではなく、クラスの具体 的な表現であるオブジェクト（インスタンス）がどのように相互作用していくかを時系列 に沿って上から下に表現していく。 UML で 振舞い図 のうちの 相互作用図 の一種として定義されている コミュニケーション図 は、オブジェクトの相互作用を構造中心に表現する図である。 シーケンス図 と表現する内容は同じで、置き換え可能である。 UML で 振舞い図 の一種として定義されている ユースケース図 は、システムが提供する 機能と利用者との関係を表現する図であり、ユーザとの 要件定義 でよく利用される。 UML で 振舞い図 の一種として定義されている アクティビティ図 は、一連の処理におけ る制御の流れを表現する図である。 フローチャート の発展形で、業務の流れなどを記述 する。 UML で 振舞い図 の一種として定義されている ステートマシン図 は、オブジェクトの状 態変化を表現する図である。 状態遷移図 の発展形であり、 組込み 系の開発でよく利用 される。 SysML （ Systems Modeling Language ）は、システムの設計および検証を行うために 用いられる、UML 仕様の一部を流用して機能拡張したグラフィカルなモデリング言語で ある。UML よりもコンパクトな仕様となっており、覚えやすく導入が容易である。 ","69 38 ソフトウェア方式設計・ソフトウェア詳細設計 38.1 ソフトウェア品質 ソフトウェア製品の品質特性に関する規格である JIS X 25100 （システムに及ぶソフト ウェア製品の品質要求及び評価（ SQuaRE ）ー システム及びソフトウェア品質モデル） による要件定義やシステム設計の際には、次の 8 つの品質特性と、それに対応する品質副 特性を考慮する必要がある。 • 機能適合性 （ニーズを満足させる機能を提供する度合い） 品質副特性： 機能完全 ・ 機能正確性 ・ 機能適切性 • 性能効率性 （資源の量に関係する性能の度合い） 品質副特性： 時間効率性 ・ 資源効率性 ・ 容量満足性 • 互換性 （他の製品やシステムなどと情報交換できる度合い） 品質副特性： 共存性 ・ 相互運用性 • 使用性 （明示された利用状況で、目標を達成するために利用できる度合い） 品質副特性： 適切度認識性 ・ 習得性 ・ 運用操作性 ・ ユーザエラー防止性 ・ ユーザインターフェース快美性 ・ アクセシビリティ • 信頼性 （機能が正常機能し続ける度合い） 品質副特性： 成熟性 ・ 可用性 ・ 障害許容性 （ 耐故障性 ）・ 回復性 • セキュリティ （システムやデータを保護する度合い） 品質副特性： 機密性 ・ インテグリティ ・ 否認防止性 ・ 責任追跡性 ・ 真正性 • 保守性 （保守作業に必要な努力の度合い） 品質副特性： モジュール性 ・ 再利用性 ・ 解析性 ・ 修正性 ・ 試験性 • 移植性 （別環境へ移してもそのまま動作する度合い） 品質副特性： 適応性 ・ 設置性 ・ 置換性 また、製品を利用するときの品質モデルについても、次のような 5 つの特性とそれに対応 する副特性が定義されている。 • 有効性 （目標を達成する上での正確さ及び完全さの度合い） • 効率性 （目標を達成するための正確さ及び完全さに関連して、使用した資源の度 合い） ","38.2 構造化設計 70 • 満足性 （製品又はシステムが明示された利用状況において使用される時、利用者 ニーズが満足される度合い） 品質副特性： 実用性 ・ 信用性 ・ 快感性 ・ 快適性 • リスク回避性 （経済状況、人間の生活又は環境に対する潜在的なリスクを緩和す る度合い） 品質副特性： 経済リスク緩和性 ・ 健康・安全リスク緩和性 ・ 環境リスク緩和性 • 利用状況網羅性 （上の 4 つの特性を伴って製品又はシステムが使用できる度合い） 品質副特性： 利用状況完全性 ・ 柔軟性 38.2 構造化設計 構造化設計 とは、機能を中心にプログラムの構造を考える設計手法である。機能分割を 行い、 段階別詳細化 をすることで階層構造を作成する。この時、プログラムの最小単位 である モジュール にまで分割する。 一つの入口と一つの出口をもつプログラムは、 順次 ・ 選択 ・ 反復 の三つの論理構造によって記述できる という考え方を 構造化定理 といい、 構造化プログラミングはこの考え方に基づいている。 STS （ Source Transform Sink ） 分割 では、データの流れに着目し、 • データの入力処理（ Source ） • データの変換処理（ Transform ） • データの出力処理（ Sink ） の 3 種類のモジュールに分割する。 TR （ Transaction ） 分割 では、トランザクションの種類ごとに一つのモジュールとす る。データの種類によってトランザクションが分かれる場合などに用いられるモジュー ","38.2 構造化設計 71 ル分割手法である。 共通機能分割 では、システム全体で同じような機能を洗い出し、それを共通機能とし てモジュールにする。 ジャクソン法 では、データの構造に着目し、入力データと出力データのデータ構造から プログラムの構造を求める。 ワーニエ法 では、入力データのデータ構造を分析し、プログラムの論理構造図 （ ワーニエ図 ）を作成する。 モジュールの 独立性 を高めることで、 • あるモジュールを変更しても他への影響が最小限にとどまるため、 保守性 が上 がる • 別のソフトウェアで利用しやすくなるため、 再利用性 が上がる などのメリットが生まれる。 モジュール強度 （ モジュール凝集度 、 モジュール結束性 ）は、モジュール内の結びつ きの強さを示す度合いである。以下の 7 つの強度があり、 強 い（上にある）ほど優れた 設計であるといえる。 • 機能的強度 （一つの機能だけを実現するモジュール） • 情報的強度 （特定のデータを扱う複数の機能を一つにまとめたモジュール） • 連絡的強度 （モジュールの要素間で同じデータの受け渡しや参照が行われるもの） • 手順的強度 （順番に行う複数の機能をまとめたもの） • 時間的強度 （時間的に連続した複数の機能をまとめたもの） • 論理的強度 （論理的に関係がある複数の機能をまとめたもの） • 暗合的強度 （関係のない複数の機能をまとめたもの） モジュール結合度 は、二つのモジュール間の結合の度合いである。以下の 6 つの強度が あり、 弱 い（上にある）ほど優れた設計であるといえる。 ","38.3 オブジェクト指向設計 72 • データ結合 （単一データの変数を引数として受け渡すもの） • スタンプ結合 （データ構造を引数として受け渡すもの） • 制御結合 （制御情報を引数として受け渡すもの） • 外部結合 （単一データの変数をグローバル変数として宣言し、参照するもの） • 共通結合 （データ構造をグローバル変数として宣言し、参照するもの） • 内容結合 （他のモジュールの内部を直接参照しているもの） 38.3 オブジェクト指向設計 クラス は、オブジェクト指向の基本単位であり、 • 属性 （ プロパティ 、変数、データ） • 操作 （関数、 メソッド ） が記述される。 クラス自体は抽象的な データ型 で、クラスから生成した インスタンス （ オブジェクト ） が実際の処理を行う。 クラスに定義された属性や操作にアクセス権を指定することで、クラスの外からのアクセ スを制限することを カプセル化 という。これを行うことで、内部の属性や操作を変更し ても、クラスの外部には影響を与えずに済む。 あるクラスを基にして別のクラスを作ることを 継承 （ インヘリタンス ）という。 この時、 • 基になったクラスを スーパークラス • 新たに作ったクラスを サブクラス と呼ぶ。 同一の呼び出しに対して、受け取った側のクラスの違いに応じて多様な振舞いを見せる性 ","38.4 再利用とパターン 73 質を ポリモーフィズム （ 多相性 、 多能性 、 多様性 ）という。 オブジェクトをまとめる、あるいは取り込むことによって、より複雑な新しい機能を作る ことを オブジェクトコンポジション という。 継承を is-a 関係というのに対し、コンポジションは has-a 関係と呼ばれる。 取り込んだオブジェクトに処理を任せることを 委譲 という。 38.4 再利用とパターン ソフトウェアは、モジュールなどの部品として作成することも可能であり、これ を 部品化 という。 ソフトウェアの部品化を行うと、最初は通常の開発よりも工数がかかるが、部品 は 再利用 しやすいため、2 回目以降の開発の工数を削減することができる。 再利用は単なる部品だけでなく、ソフトウェアの設計や構造など、さらに大きな単位で考 えられるようになった。 その結果、生み出されたのが パターン であり、 • 設計のノウハウを集結させて再利用を可能にした デザインパターン • ソフトウェアの構造（ アーキテクチャ ）に関する アーキテクチャパターン などがある。 MVC （ Model View Controller ）はアーキテクチャパターンの一つであり、機能を • 業務ロジック（ Model • 画面出力（ View ） • それらの制御（ Controller ） の三つのコンポーネントに分けていく。 ","74 39 ソフトウェア構築 39.1 ソフトウェアユニットの作成 ソフトウェアユニットの作成において、それぞれが好き勝手にコードを書くと形式が統一 されず読みにくくなってしまうため、あらかじめ コーディング基準 を決め、コードの形 式を揃えておく。 コーディング支援手法 とは、ソフトウェアコードの作成を簡易にするための手法やツー ルである。 39.2 ソフトウェアユニットのテスト テストするモジュールを呼び出すモジュール（ 上位モジュール ）が未完成の場合に、テ スト用に作成する仮のモジュールを ドライバ という。 テストするモジュールから呼び出すモジュール（ 下位モジュール ）が未完成の場合に、 テスト用に作成する仮のモジュールを スタブ という。 39.3 テストの手法 テストの手法は、次の 2 種類に大別される。 • ソースコードなどのシステム内部の構造を理解した上で行う ホワイトボックステスト • 外部から見て仕様書通りの機能を持つかどうかをテストする ブラックボックステスト 制御パステスト は、プログラム中のソースコードが全て実行されるようにテストデータ を与えるテストである。最も代表的なホワイトボックステストの手法で、どの程度のソー スコードが網羅されたかを カバレッジ （ 網羅率 ）で示す。 ","39.3 テストの手法 75 テストする経路によって、次のような様々な網羅方法がある。 • 全ての命令を最低 1 回は実行するように設計する 命令網羅 • 全ての分岐で、その分岐経路の全てを 1 回は実行するように設計する 判定条件網羅 （ 分岐網羅 ） • 全ての条件で、その可能な結果の全てを 1 回は実行するように設計する 条件網羅 • 上の二つの両方を満たすように設計する 判定条件・条件網羅 • 全ての条件判定の組み合わせを網羅するように設計する 複数条件網羅 • 全ての経路を最低 1 回は実行するよう設計する 経路組合せ網羅 （ 経路網羅 ） このうち、テストケースの数が最も多くなるのは 複数条件網羅 である。 データフロー・パステスト は、制御部分ではなく使用されるデータに焦点を当てて行 うホワイトボックステストである。ソースコード内で扱うデータや変数について、 定義 → 生成 → 使用 → 消滅 の各ステップが正しく順番通りに行われているかを調べる。 同値分割 は、 ブラックボックステスト の手法の一つであり、入力値と出力値をシステム として動作が同じとみなせる値の範囲（ 同値クラス ）に分類し、各同値クラスを代表す る値に対してテストを行う方法である。 エラーは分岐の境界で起こりやすいため、ブラックボックステストでは、同値クラスの両 端の値（ 境界値 ）をテストする 限界値分析 を行うこともある。 ブラックボックステストのテスト項目を作成するために用いられる 決定表 （ デシジョンテーブル ）は、考慮すべき条件と、その条件に対する結果のマト リックスを作成する方法である。 ブラックボックステストは、入力と出力の関係を表す 原因・結果グラフ を作成して行う こともある。 ","39.4 ソフトウェアの品質評価 76 39.4 ソフトウェアの品質評価 ソフトウェアの品質を評価するために、ツールなどを使い、客観的な指標を計測すること を メトリクス計測 という。 • 関数やクラスの モジュール強度 や モジュール結合度 • 分岐 の数 • アクセス 率 などを計測することによって、ソフトウェアの弱点を具体的に把握することができる。 40 ソフトウェア結合・ソフトウェア適格性確認テスト ソフトウェア開発のテスト工程では、エラー（バグ）を発見して修正する作業が順次行わ れるため、テスト項目の消化とともに、発見されるエラーの増加割合は 減少 していく。 このことを ソフトウェア信頼度成長モデル といい、 その増加割合が従う曲線を 信頼度成長曲線 （ ゴンベルツ曲線 ）という。 テスト項目に対して発見される総エラー数が信頼度成長曲線に合わない場合は、 テスト に 問題があるとみなし、検討を行う。 バグの管理では、 • 時間の経過に伴うバグ検出数 • 未消化テスト項目数 • 未解決バグ数 をプロットし、 バグ管理図 を作成する。 バグの管理では、 • 未消化テスト項目数 • 累積誤り検出数 ","77 を並記する テスト工程品質管理図 を作成することもある。 エラー埋め込み法 は、プログラムに意図的にエラーを埋め込んだ状態でテストを行う方 法である。 埋め込みエラーと真のエラーは同じ 割合 で発見される という仮定のもと、発見された埋込エラー数から、まだ発見されていない真のエラー数を 推測する。 41 システム結合・システム適格性確認テスト システム適格性確認テストでは、単に不具合がないかという デバッグ だけでなく、性能 などの要件についてもテストを行い、システムの チューニング （性能の最適化）を行う。 機能テスト は、ユーザから要求された機能要件をシステムが満たしているかを検証する テストである。 非機能要件テスト は、機能要件以外の、システムの非機能要件を満たしているかを検証 するテストである。 性能テスト は、システムの性能要件が確保されているかを検証するテストである。 負荷テスト は、短時間に大量のデータを与えるなどの高い負荷をかけた時にシステムが 正常に機能するかを検証するテストである。 セキュリティテスト は、システムのセキュリティ要件を満たしているかを検証するテス トである。 リグレッションテスト （ 回帰テスト 、 退行テスト ）は、システムを変更した時に、そ の変更によって予想外の影響が現れていないかを確認するテストである。変更した部分以 ","78 外のプログラムも含めてテストする。 42 導入 古くなったシステムやハードウェア、ソフトウェアを新しいものや別なものに置き換える ことを リプレース という。 43 受入れ支援 システムまたはソフトウェアの受け入れ支援では、 • 取得者の受け入れ レビュー と受け入れ テスト の支援 • ソフトウェア製品の 納入 • 取得者への 教育訓練 及び 支援 を行う。 利用者支援のため、 • 業務やコンピュータ操作手順 • 業務応用プログラム運用手順 などを 利用者マニュアル として文書化する。 44 保守・廃棄 ソフトウェア保守の形態には、 • バグ修正（ 是正保守 ） • 日々のチェックを行う 日常点検 • 定期的に行う 定期保守 • 障害や不具合が起こる前に行う 予防保守 • 障害や不具合が起こった後に行う 事後保守 ","79 • 修理を現場で行う オンサイト保守 • 修理を他の場所から行う 遠隔保守 などがある。 廃棄プロセスでは、 組織の運用の完整性 （完全に整っている状態）を保ちながら、システ ムの既存ソフトウェア製品またはソフトウェアサービスを廃止にすることが目標である。 第 XII 部 ソフトウェア開発管理技術 45 開発プロセス・手法 45.1 ソフトウェア開発モデル ウォーターフォールモデル は、最も一般的な、古くからある開発モデルである。開発プ ロジェクトを時系列に、 • 要件定義 • 設計 • プログラミング • テスト という形でいくつかの作業工程に分解し、それを順番通りに進めていく。なるべく後戻り しないように、各工程の最後に レビュー を行うなどして 信頼 性をあげる。 プロトタイピングモデル は、開発の早い段階で試作品（ プロトタイプ ）を作成し、それ をユーザが確認し評価することで、システムの仕様を確立していく方法である。 スパイラルモデル は、システム全体をいくつかの部分に分け、分割した単位で開発のサ イクルを繰り返す。 ラウンドトリップ は、 スパイラルモデル の発展形であり、分析と設計、プログラミング ","45.1 ソフトウェア開発モデル 80 を何度か行き来しながらトライアンドエラーで完成させていくオブジェクト指向開発の手 法である。 RAD （ Rapid Application Development ）は、「早く、安く、高品質」を目的とした短 期のシステム開発の手法である。CASE ツールや開発ツールなどを活用し、プログラム作 成を半自動化する。 インクリメンタルモデル は、大きなシステムをいくつかの独立性の高いサブシステムに 分け、そのサブシステムごとに開発、リリースしていく手法である。段階的にリリースす るため、全ての機能が揃っていなくてもシステムの動作を確認できる。 エボリューショナルモデル は 成長モデル 、 進化型モデル ともいい、 1. 要求に従ってソフトウェアを作成してその出来を評価する 2. 改訂された要求に従って再度ソフトウェアを作成する という作業を繰り返す。 DevOps は、開発担当者と運用担当者が連携して協力する開発手法である。 アジャイル開発 は、迅速に無駄なくソフトウェア開発を行う手法の総称である。 従来の開発手法とは考え方に違いがあり、 特に価値については、 アジャイルソフトウェア開発宣言 で次のように表されている。 • プロセスやツールよりも 個人と対話 を • 包括的なドキュメントよりも 動くソフトウェア を • 契約交渉よりも 顧客との協調 を • 計画に従うことよりも 変化への対応 を アジャイル開発の代表的な手法の一つである XP （ eXtreme Programming ）は、事前計 画よりも柔軟性を重視する、難易度の高い開発や状況が刻々と変わるような開発に適した 手法である。 • コミュニケーション ","45.1 ソフトウェア開発モデル 81 • シンプル • フィードバック • 勇気 • 尊重 の 5 つに価値がおかれ、その価値の下に、いくつかの プラクティス （習慣、実践）が定 められている。 XP の代表的なプラクティスの一つである イテレーション は、アジャイル開発を繰り返 す単位であり、短いサイクルで繰り返すことで、反復し、柔軟に対処しながら開発を行う。 XP の代表的なプラクティスの一つである ペアプログラミング は、二人一組で実装を行 い、一人がコードを書き、もう一人がそれをチェックしナビゲートするという手法である。 XP の代表的なプラクティスの一つである テスト駆動開発 （ TDD ： Test-Driven Development ）では、実装より先にテストを作 成する。 XP の代表的なプラクティスの一つである リファクタリング では、完成済みのコードを、 動作を変更させずに改善する。 XP の代表的なプラクティスの一つである 継続的インテグレーション は、品質改善や納 期短縮のための習慣であり、開発者がソースコードの変更を頻繁にリポジトリに登録し、 ビルドとテストを定期的に実行することで、テストの効率化や段階的な機能追加を実現で きるというものである。 XP の代表的なプラクティスの一つである バーンダウンチャート は、時間と作業量の関 係をグラフ化したものであり、プロジェクトの状況を可視化することができる。 XP の代表的なプラクティスの一つである レトロスペクティブ は、イテレーションごと ","45.2 開発プロセス 82 にチームの作業方法を見直し、作業を改善していく手法である。 アジャイル開発の代表的な手法の一つである スクラム は、開発チームが一体となって、 共通のゴールに向けて働くことを目的とした方法論である。プロジェクトの途中で、顧客 が要求や必要事項を変えられるということを想定している。 スクラムでは、 • プロダクトオーナ （作成するプロダクトに最終的に責任をもつ人） • 開発チーム • スクラムマスタ （プロジェクトの推進に責任をもつ人） という 3 つの役割から スクラムチーム を形成する。 スクラムの工程の単位は スプリント で、 • 開発 • まとめ • レビュー • 調整 などの作業を繰り返す。 スクラムでは、 • プロダクトバックログ • スプリントバックログ という 2 種類の バックログ を作成し、製品に必要な要素や、スプリントで実現する仕様 をまとめて管理する。 45.2 開発プロセス ソフトウェアライフサイクルプロセス（ SLCP ： Software Life Cycle Process ）は、ソ フトウェアの開発プロジェクトにおいて、取得者（発注者）と供給者（受注者）の間で ","45.3 開発手法 83 開発作業についての誤解が生じないように、ソフトウェア開発に関連する作業内容を 詳細に規定したものである。現在のバージョンは SLCP-JCF2013 で、 ISO/IEC 12207 （ JIS X 0160 ）を包括しており、 共通フレーム 2013 とも呼ばれる。 開発と保守のプロセスを評価、改善するために、システム開発組織のプロセスの成熟度を グラフ化したものが CMMI （ Capability Maturity Model Integration ）であり、組織 を次の 5 段階のプロセス成熟度モデルに照らし合わせ、等級をつけて評価する。 1. 初期 （場当たりで秩序がない状態。成功は、担当する人員の力量に依存する） 2. 管理された （基本的なプロジェクト管理が確実に行われる状態。反復可能） 3. 定義された （標準の開発プロセスがあり、利用されている状態） 4. 定量的に管理された （品質と実績のデータをもち、プロセスの実情を定量的に把握している状態） 5. 最適化している （プロセスの状態を継続的に改善するための仕組みが備わっている状態） 45.3 開発手法 ソフトウェアにおける リバースエンジニアリング とは、 • オブジェクトコードをソースコードに変換する 逆コンパイラ • 関数の呼び出し関係を表現した コールグラフ などを使用して構造を分析し、ソースコードを明らかにすることである。 リバースエンジニアリングを行い、元のソフトウェア権利者の許可なくソフトウェアを開 発、販売すると、元のソフトウェアの 知的財産権 を侵害する恐れがある。 マッシュアップ とは、複数の提供者による API を組み合わせることで新しいサービスを ","84 提供する技術である。 46 知的財産適用管理 46.1 著作権管理 プログラムの著作権（ 人格権 ・ 財産権 ）は、契約の内容が優先され、契約書などでの取 り決めがない場合は、以下のようになる。 • 個人で作成した場合は、 プログラマ が著作者 （二人以上が共同で作成した場合は 共同著作者 となる） • 従業員が職務で作成した場合は、 雇用者 である 法人 が創作者となり、著作権を もつ • 委託によって作成された場合は、原始的には 作成者 （ 受託者 ）が著作権をもつ （※契約などで 受託者 から 委託者 へ著作権の移転が行われるケースも多い） 46.2 特許管理 特許されている発明を実施するための権利を 実施権 といい、 • ライセンスを受けた者だけが独占的に実施できる 専用実施権 • 実施するだけの権利である 通常実施権 の 2 種類がある。 他人が特許を出願する前にその発明を使用していた場合などに、他人が特許権を取得して も、その発明を継続して利用できる通常実施権を 先使用権 という。 46.3 技術的保護 知的財産権を確保するための技術的保護の手法には、 • メディアの無断複製を防止する コピーガード ","85 • コンテンツの不正利用を防ぐ デジタル著作権管理 （ DRM ： Digital Rights Management ） などがある。 不正コピーが行われないように、 インストール後にライセンスの登録を行う アクティベーション が必要なソフトウェアも ある。 47 開発環境管理 組込システムなど、ソフトウェアを実行する機器に適切な開発環境がない場合は、CPU のアーキテクチャが異なる通常の PC などで開発を行う クロス開発 のためのツールを用 意する必要がある。 開発環境を構築して準備するとともに、コンピュータ資源の稼働状態を適切に把握・管理 する 開発環境稼働状況管理 を行う必要がある。 設計データ管理 では、設計に関わるデータの バージョン管理 や、プロジェクトでの共有 管理を行う。 アクセス権 や 更新履歴 も管理し、 • 誰がいつ何の目的で利用したのか • 不適切な持ち出しや改ざんがないか などを管理する必要がある。 開発に利用するツールやバージョンが異なると、ソフトウェアの 互換性 に問題が生じる ことがある。そのため、ソフトウェアの 構成品目 とバージョンを管理し、ツールに起因 するバグやセキュリティホールの発生などを抑える ツール管理 を行う必要がある。 ライセンスの内容を理解し、定期的に インストール 数と 保有ライセンス 数を照合確認す ることで、適切に使用しているかどうかを確認する ライセンス管理 を行う必要がある。 ","86 48 構成管理・変更管理 ソースコードや文書などの成果物とその変更履歴を管理し、 任意のバージョンの製品を再現可能にする方法論を ソフトウェア構成品目 （ SCM ： Software Configuration Management ）という。 バージョン管理システム はこのためのツールである。 構成管理の対象物として変更と管理を行うものを ソフトウェア構成品目 （ SCI ： Software Configuration Item ）という。 第 XIII 部 プロジェクトマネジメント 49 プロジェクトマネジメント プロジェクト とは、目標達成のために行う有期の活動である。 プロジェクトマネジメント とは、プロジェクトの要求事項を満たすため、知識、スキル、 ツール及び技法をプロジェクト活動に適用することである。 具体的には、 • テーラリング （プロジェクトの設計）を実施し、プロセスごとに適切なツールや 技法を決める • ステークホルダ （利害関係者）のニーズと期待に応えつつ、競合する要求のバラ ンスをとる などを行う。 プロジェクトマネジメントでは、プロジェクトの目標を達成するため、 1. 計画する（ Plan ） ","87 2. 計画通りに作業を進める（ Do ） 3. 計画と実績の差異を検証する（ Check ） 4. 差異の原因に対する処置を行う（ Act ） という PDCA マネジメントサイクル で管理する。 プロジェクトマネジメントの専門家が、「実務でこうすればプロジェクト成功の可能性が 高くなる」という方法論やスキルなどを集めて作成された標準が プロジェクトマネジメント知識体系 （ PMBOK ： Project Management Body of Knowledge ）であり、 • 立ち上げプロセス群 （プロジェクトの認可を得て、新しいフェーズを明確に定める） • 計画プロセス群 （プロジェクトのスコープを定義し、目標を洗練し、一連の行動を規定する） • 実行プロセス群 （プロジェクトの作業を実行する） • 監視コントロール・プロセス群 （プロジェクトの進捗やパフォーマンスを追跡し、統制し、変更を開始する） • 終結プロセス群 （プロジェクトを公式に完結し、全てのアクティビティを終了する） という 5 つのプロセス群と、 1. プロジェクト 統合 マネジメント 2. プロジェクト ステークホルダ マネジメント 3. プロジェクト スコープ マネジメント 4. プロジェクト 資源 マネジメント 5. プロジェクト タイム マネジメント 6. プロジェクト コスト マネジメント 7. プロジェクト リスク マネジメント 8. プロジェクト 品質 マネジメント 9. プロジェクト 調達 マネジメント 10. プロジェクト コミュニケーション マネジメント ","88 という 10 の知識エリアが定義されている。 プロジェクトライフサイクル は、プロジェクトのフェーズの集合である。 プロジェクトの規模や複雑さはさまざまだが、ライフサイクルは 1. プロジェクト開始 2. 組織編成 と 準備 3. 作業実施 4. プロジェクト終結 の 4 段階で表現することができる。 プロジェクトライフサイクルにおける典型的なコストと要員数は、 1. プロジェクト開始時に 少な く 2. 作業を実施するにつれて 頂点に達 し 3. プロジェクトが終了に近づくと 急激に落ち込む というように遷移する。 ステークホルダの影響力・リスク・不確実性は、 1. プロジェクト開始時に 最大 であり 2. プロジェクトが進むにつれて 徐々に低下 する。 変更コストは、プロジェクトが終了に近づくにつれて 大幅に増加 する。 プロジェクトが複数あり、それぞれが独立しているわけではなく、一緒に管理することで 効率化を図れる場合には、それをまとめて プログラム という単位にする。 複数の プロジェクト をまとめてプログラムとして管理することを プログラムマネジメント といい、 ","89 • 一つのプロジェクトを管理する人を プロジェクトマネージャ • 関連する複数のプロジェクトを調整して管理する人を プログラムマネージャ という。 複数のプロジェクトやプログラムを一元的にマネジメントし、全体として最適化を図る役 割を担う部署のことを PMO （ Project Management Oﬃce ）という。 企業の戦略目標から、どのようなプロジェクトやプログラムを実行し、資源を配分するの かを決定することを ポートフォリオ・マネジメント という。 50 プロジェクト結合 プロジェクト統合マネジメントに含まれるプロセスには、 • プログラム憲章 作成 • プロジェクトマネジメント計画書作成 • プロジェクト実行の指揮・マネジメント • プロジェクト作業の監視・コントロール • 統合変更 管理 • プロジェクトやフェーズの終結 がある。 統合変更管理プロセスでは、 • プロジェクトのプロダクト・サービス・所産・構成要素などに対する変更と実施状 況を記録・報告 • 要求事項への適合性を検証する活動を支援 ","90 するため、 コンフィギュレーションマネジメント （ 構成管理 ）を行う。 プロジェクト憲章 は、プロジェクトやフェーズを公式に認可する文書である。 立ち上げ プロセス群で実行される、 ステークホルダ のニーズと期待を満足させる初期 の要求事項を文書化するプロセスが プロジェクト憲章作成 である。 51 プロジェクトのステークホルダ ステークホルダ （ 利害関係者 ）とは、プロジェクトに積極的に関与している or プロジェ クトの実行や完了にとって利益に影響を受ける個人や組織である。 具体的には、 • 顧客やユーザ • スポンサー • プロジェクトチームのメンバ • メンバが所属する組織 • 商品の納入を行う業者 などが該当する。 プロジェクトステークホルダマネジメントに含まれるプロセスには、 • ステークホルダマネジメント計画 • ステークホルダ エンゲージメントマネジメント • ステークホルダ エンゲージメントコントロール がある。 エンゲージメント とは、ステークホルダの関係や関わりの度合いを、強すぎず弱すぎず 適切なものとするような活動である。 ステークホルダを適切に管理するため、ステークホルダの利害や環境に関する情報を文書 化する。 ステークホルダ登録簿 を作成し、ステークホルダの氏名や評価情報などを記載 ","91 する。 52 プロジェクトのスコープ プロジェクトスコープ とは、プロジェクトの範囲であり、必要なプロダクトやサービス を生み出すために行わなければならない作業である。 プロジェクトスコープマネジメントに含まれるプロセスには、 • スコープ マネジメント計画 • 要求事項収集 • スコープ 定義 • WBS 作成 • スコープ 妥当性確認 • スコープ コントロール がある。 スコープ定義 プロセスでは、専門家の判断やプロダクト分析、ワークショップなどの結 果を参考にしながらスコープを定義する。 定義したスコープは、 • プロジェクトの要求 成果物 • 成果物 受け入れ基準 • プロジェクトからの 除外事項 などの項目を含めて プロジェクトスコープ記述書 に記述する。 プロジェクトのスコープは時間の経過とともに 拡大 していく傾向があり、そうなった状 態を スコープクリープ という。 スコープクリープが起こるとプロジェクトの成功が危うくなるため、プロジェクトマネー ","92 ジャはそれが起こらないよう、適切に スコープコントロール を行う必要がある。 WBS （ Work Breakdown Structure ）は、成果物を中心に、プロジェクトチームが実 行する作業を階層的に要素分解したものである。 WBS では、上位の WBS レベルから下位の WBS レベルへと、より詳細な構成要素に分 解する。 最も詳細に分解した最下位の WBS を ワークパッケージ といい、実際に行う作業 （ アクティビティ ）を割り当てる。 過去のプロジェクトの実績に基づき、典型的な作業の階層構造や作業項目をまとめた雛形 を WBS テンプレート といい、これを作ることで、 中長 期的にスケジュール作成の効率 と精度を高めることができるようになる。 WBS 辞書 は WBS 作成プロセスにおいて生成する文書であり、 • 各 WBS 要素に対応する作業の詳細な記述 • 技術的な文書の詳細な記述 などを行い、WBS を補完する。 53 プロジェクトの資源 プロジェクト資源マネジメントのプロセスには、 • 資源マネジメント計画作成 • プロジェクトチームの 編成 • プロジェクトチームの 育成 がある。 プロジェクトの人材育成では、知識中心ではなく、 • 日常業務の中で先輩や上司が個別指導する OJT （ On the Job Training ） ","93 • 具体的な事例を取り上げて詳細に分析し、解決策を見出していく ケーススタディ • 制限時間内で多くの問題を処理させる インバスケット などの実践的な教育技法が用いられる。 54 プロジェクトの時間 54.1 マネジメントプロセス プロジェクトタイムマネジメントに含まれるプロセスには、 • スケジュールマネジメント計画 • アクティビティ 定義 • アクティビティ 順序設定 • アクティビティ 資源見積もり • アクティビティ 所要時間見積もり • スケジュール 作成 • スケジュール コントロール がある。 プロジェクトの WBS で定義されたワークパッケージを、より小さく、よりマネジメント しやすい単位に要素分解したものが アクティビティ である。 マイルストーン とは、プロジェクトにおいて重要な意味をもつ時点やイベントのことで あり、節目の工程となるものである。 プロジェクトタイムマネジメントでは、 1. チームメンバや専門家などと協力してアクティビティを 分解 2. 必要な全てのアクティビティを網羅した アクティビティ・リスト を作成 3. 全てのマイルストーンを 特定 4. マイルストーン・リスト を作成 5. アクティビティの 順序関係 をまとめる ","54.2 スケジュールの作成方法 94 6. プロジェクトのスケジュールを アローダイアグラム で表現 という手順を踏む。 54.2 スケジュールの作成方法 クリティカルパス法 では、 アクティビティ（作業）の順序関係を表した アローダイアグラム から、 プロジェクト完了までにかかる最長の経路（ クリティカルパス ）を計算し、それを基準 にそれぞれのアクティビティがプロジェクト完了を延期せずにいられる余裕がどれだけあ るか（ トータルフロート ）を計算する。 具体的には、 1. スケジュール・ネットワークの経路の往路時間（ フォワードパス ）を求める 2. 作業時間の合計が最も大きい経路を クリティカルパス 、 その期間を プロジェクト全体の所要時間 とする 3. 所要時間から逆算して復路時間（ バックワードパス ）を計算する という手順を踏み、 • フォワードパス によって全てのアクティビティの最早開始日と最早終了日を • バックワードパス によって全てのアクティビティの最遅開始日と最遅終了日を 求めることができる。 クリティカルパス法では、資源（人員など）に関する制限を考慮せずに計算していたが、 実際には資源に限度があるため、その資源に合わせてクリティカルを修正する手法であ る クリティカルチェーン法 が生み出された。 ","54.3 スケジュール短縮手法 95 54.3 スケジュール短縮手法 トレードオフ とは、一方を追求すれば他方を犠牲にせざるを得ないという状態 or 関係で ある。 クラッシング とは、コストとスケジュールのトレードオフを分析し、最小の追加コスト で最大の期間短縮を実現する手法を決定することである。 ファストトラッキング は、順を追って実行するフェーズやアクティビティを並行して実 行するというスケジュール短縮手法である。 54.4 スケジュールコントロール スケジュールコントロールでは、スケジュール作成で行われたクリティカルパス法の分析 などにより、基本となるスケジュールである スケジュールベースライン を決定し、それ を基に 差異分析 を行い、スケジュールを調整する。 • 横軸に 開発期間 • 縦軸に 予算消化率 を設定してグラフ化した トレンドチャート は、プロジェクトの費用管理と進捗管理を同 時に行うために用いられる。 ガントチャート は、作業の進捗状況を表す図であり、工程管理に用いられる。 • 縦軸で WBS のそれぞれの要素 を表す • 横棒で実施 期間 や実施 状況 を表す ことで、一種の棒グラフのような形で視覚化できる。 ","96 55 プロジェクトのコスト 55.1 マネジメントプロセス プロジェクトコストマネジメントに含まれるプロセスには、 • コストマネジメント計画 • コスト 見積もり • 予算 設定 • コスト コントロール がある。 55.2 コスト見積手法 ファンクションポイント法 （ FP 法 ）は、ソフトウェアの機能（ ファンクション ）を基 本にして、その処理内容の複雑さから ファンクションポイント を算出することでコスト を見積もる手法であり、プログラミングに入る前にユーザ要件が決まり必要な機能が見え てきた段階で見積もりが行えるという特徴がある。 具体的には、次のような手順を踏む。 1. 帳票・画面・ファイルなどのソフトウェアの機能を洗い出し、その数を見積もり 2. 機能を 5 種類の ファンクションタイプ に分ける 3. それぞれの難易度を 容易 ・ 普通 ・ 複雑 の 3 段階で評価して点数化 4. それらを合計したものを 基準値 とする 5. システム特性に対してその複雑さを 14 の項目で 0 ～ 5 の 6 段階で評価 6. それらを合計したものを 調整値とする 7. ファンクションポイント = 基準値 × 0.65 + 調整値 100 で算出 ファンクションポイント法におけるファンクションタイプは、次の 5 種類に分類されて いる。 ","55.2 コスト見積手法 97 ファンクション ファンクションタイプ トランザクション ファンクション 外部入力 （ EI ） 外部出力 （ EO ） 外部参照 （ EQ ） データ ファンクション 内部論理ファイル （ ILF ） 外部インテーフェースファイル （ EIF ） LOC （ Lines Of Code ） 法 は、ソースコードの行数でプログラムの規模を見積もる方 法であり、 • オンライン系 • バッチ系 の 2 つに分けて機能を洗い出す。 従来からある方法だが、担当者によって見積もり規模に大きな 偏差 が出ることから、客 観的に計算できる ファンクションポイン法 が普及してきた。 COCOMO （ Constructive Cost Model ）は、ソフトウェアで予想されるソースコード の行数に、エンジニアの能力や要求の信頼性などによる 補正係数 をかけ合わせ、開発に 必要な工数・期間などを算出する手法である。 現在は ファンクションポイント や CMMI などの概念を取り入れて発展させた COCOMO II が提唱されている。 三点見積法 （ PERT 分析 ）は、見積もりの不確実性を考慮して、コストの精度を高める 手法である。 具体的には、 • 最も起こる可能性のある 最頻値 （ C M ） • 最良のケースを想定した 楽観値 （ C O ） • 最悪のケースを想定した 悲観値 （ C P ） の 3 種類を見積もり、これらの 3 種類の見積もりを 加重平均 し、次の式でコスト の 期待値 （ C E ）を求める。 ","55.3 マネジメント技法 98 C E = C O +4C M + C P 6 一般的な傾向として、 開発規模が大きくなると、 指数 的に 開発工数 が大きくなる というモデルが知られており、 開発規模 （ソースコードの行数）を KDSI、 開発工数 （人数 × 月数）を MM とすると、次式の関係が成り立つ。 MM =3.0 × (KDSI ) 1.12 55.3 マネジメント技法 アーンド・バリュー・マネジメント （ EVM ）は、予算とスケジュールの両方の観点か らプロジェクトの遂行を定量的に評価するプロジェクトマネジメントの技法であり、 • 遂行すべき作業に割り当てられた予算 PV （ Planned Value ： 計画値 ） • 実施した作業の価値 EV （ Earned Value ： 出来高 ） • 実施した作業のために実際に発生したコスト AC （ Actual Cost ： 実コスト ） の 3 つの値を用いて測定・監視する。 進捗の遅れを差異で表した スケジュール差異 （ SV ： Schedule Variance ）は、 SV = EV − PV で求められ、 • 正の値なら、スケジュールは 進んで いる • 負の値なら、スケジュールは 遅れて いる と言える。 コストの超過を表した コスト差異 （ CV ： Cost Variance ）は、 CV = EV − AC ","99 で求められ、 • 正の値なら、コストは 黒字 • 負の値なら、コストは 赤字 といえる。 進捗状況を指数で表した スケジュール効率指数（ SPI ： Schedule Performance Index ） は、 SPI = EV PV で求められ、 • SPI > 1 なら 進んで いる • SPI < 1 なら 遅れて いる といえる。 コストの効率を指数で表した コスト効率指数 （ CPI ： Cost Performance Index ）は、 CPI = EV AC で求められ、 • CPI > 1 なら 黒字 • CPI < 1 なら コスト超過 といえる。 56 プロジェクトのリスク 56.1 マネジメントプロセス もしそれが発生すれば、プロジェクト目標に影響を与える不確実な事象 or 状態のうち、 • 将来において起こるものを リスク ","56.1 マネジメントプロセス 100 • 既に起こっていて明らかなものを 課題 （ 問題点 ） といい、両者は区別して管理される。 プロジェクトリスクマネジメントに含まれるプロセスには、 • リスクマネジメント計画 • リスク 特定 • 定性 的リスク分析 • 定量 的リスク分析 • リスク 対応 計画 • リスクコントロール がある。 リスクの情報収集方法としては、 • 参加者が自由にアイディアを出す ブレーンストーミング • 専門家の間でアンケートを使用して質問を繰り返すことで合意を形成す る デルファイ法 • 根本原因 分析 などがある。 リスク分析では、 リスクの 発生確率 とその 影響度 を策定し、プロジェクトへの影響を分 析する。 分析方法には、 • 大まかにリスクの優先順位づけを行う 定性 的リスク分析 • リスクの影響を数値的に分析する 定量 的リスク分析 の 2 種類がある。 プラスのリスク or 好機に対する戦略としては、次のものがある。 • 活用 （好機が確実に到来するようにする） ","101 • 共有 （能力の高い第三者に好機の実行権を与える） • 強化 （好機の発生確率や影響度を増加させる） • 受容 （何もしないが、実現したときには利益を享受する） マイナスのリスク or 脅威に対する戦略としては、次のものがある。 • 回避 （脅威を完全に取り除くために、プロジェクトマネジメント計画を変更する） • 転嫁 （脅威によるマイナスの影響や責任の一部 or 全部を第三者に移転する） 保険 ・ 担保 etc. • 軽減 （リスク事象の発生確率や影響度を減少させる） • 能動的な受容 （脅威の発生に備えて時間や資金に予備を設けるなど） • 受動的な受容 （何もせず、起きたときに対処する） 57 プロジェクトの品質 57.1 品質マネジメントプロセス プロジェクト品質マネジメントに含まれるプロセスには、次のものがある。 • 品質要求事項や品質標準を定め、 プロジェクトでそれを順守するための方法を文書化する 品質マネジメント計画 （ 品質計画 ） • 適切な品質標準と運用基準の適用を確実に行うために、 品質の要求事項と品質管理測定の結果を監査する 品質保証 • パフォーマンスを査定し、 必要な変更を提案するために品質活動の実行結果を監視・測定する 品質コントロール （ 品質管理 ） ","57.2 品質マネジメント手法 102 57.2 品質マネジメント手法 管理図 は、許容される 上方管理境界 と 下方管理境界 を設定し、 • プロセスが安定しているかどうか • パフォーマンスが予測どおりであるかどうか を判断するための図である。 ベンチマーク は、実施中 or 計画中のプロジェクトを、 類似度 の高いプロジェクトと比 べることによって、 • ベストプラクティス の特定 • 改善策の考案 • 測定基準の設定 などを行うことである。 58 プロジェクトの調達 プロジェクト調達マネジメントのプロセスには、次のものが含まれる。 • プロジェクト調達の意思決定を文書化し、 取り組み方を明確にして、納入候補を特定する 調達マネジメント計画 • 納入候補から回答を得て、納入者を選定し、契約を締結する 調達実行 • 調達先との関係をマネジメントし、契約のパフォーマンスを監視して、 必要に応じて変更と是正を行う 調達コントロール • プロジェクトにおける個々の調達を完結する 調達終結 59 プロジェクトのコミュニケーション プロジェクトコミュニケーションマネジメントのプロセスには、 ","103 • コミュニケーションマネジメント計画 • コミュニケーションマネジメント • コミュニケーションコントロール があり、 コミュニケーションマネジメント計画書 を作成し、 ステークホルダ のコミュニ ケーションに関するニーズに応えるための仕組みを構築する。 コミュニケーションをとる場合の伝達方法を コミュニケーションチャネル といい、近年 では、 • SNS • 動画配信 なども重要な方法として挙げられる。 "]